{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/index","pixi-spine.min.js","src/SpineRuntime/Animation.js","src/SpineRuntime/AnimationState.js","src/SpineRuntime/AnimationStateData.js","src/SpineRuntime/Atlas.js","src/SpineRuntime/AtlasAttachmentParser.js","src/SpineRuntime/AtlasPage.js","src/SpineRuntime/AtlasReader.js","src/SpineRuntime/AtlasRegion.js","src/SpineRuntime/AttachmentTimeline.js","src/SpineRuntime/AttachmentType.js","src/SpineRuntime/Bone.js","src/SpineRuntime/BoneData.js","src/SpineRuntime/BoundingBoxAttachment.js","src/SpineRuntime/ColorTimeline.js","src/SpineRuntime/Curves.js","src/SpineRuntime/DrawOrderTimeline.js","src/SpineRuntime/Event.js","src/SpineRuntime/EventData.js","src/SpineRuntime/EventTimeline.js","src/SpineRuntime/FfdTimeline.js","src/SpineRuntime/IkConstraint.js","src/SpineRuntime/IkConstraintData.js","src/SpineRuntime/IkConstraintTimeline.js","src/SpineRuntime/MeshAttachment.js","src/SpineRuntime/RegionAttachment.js","src/SpineRuntime/RotateTimeline.js","src/SpineRuntime/ScaleTimeline.js","src/SpineRuntime/Skeleton.js","src/SpineRuntime/SkeletonBounds.js","src/SpineRuntime/SkeletonData.js","src/SpineRuntime/SkeletonJsonParser.js","src/SpineRuntime/Skin.js","src/SpineRuntime/Slot.js","src/SpineRuntime/SlotData.js","src/SpineRuntime/TrackEntry.js","src/SpineRuntime/TranslateTimeline.js","src/SpineRuntime/WeightedMeshAttachment.js","src/SpineRuntime/index.js","src/SpineUtil/index.js","src/Spine/index.js","src/loaders/Loader.js","src/loaders/atlasParser.js","src/loaders/imageLoaderAdapter.js","src/loaders/index.js","src/loaders/syncImageLoaderAdapter.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","PIXI","spine","Spine","SpineRuntime","loaders","./Spine","./SpineRuntime","./loaders",2,"Animation","name","timelines","duration","this","prototype","apply","skeleton","lastTime","time","loop","events","mix","alpha","binarySearch","values","target","step","low","high","Math","floor","current","binarySearch1","linearSearch","last","../SpineUtil",3,"TrackEntry","AnimationState","stateData","data","tracks","onStart","onEnd","onComplete","onEvent","timeScale","update","delta","previous","previousDelta","mixTime","next","delay","setCurrent","endTime","clearTrack","resetDrawOrder","previousTime","animation","mixDuration","ii","nn","event","count","clearTracks","trackIndex","_expandToIndex","index","push","entry","getMix","setAnimationByName","animationName","skeletonData","findAnimation","setAnimation","addAnimationByName","addAnimation","getCurrent","./TrackEntry",4,"AnimationStateData","animationToMixTime","defaultMix","setMixByName","fromName","toName","from","to","setMix","key","hasOwnProperty",5,"AtlasReader","AtlasPage","AtlasRegion","syncImageLoaderAdapter","Atlas","atlasText","loaderFunction","callback","iterateParser","line","reader","readLine","self","trim","page","readTuple","tuple","width","parseInt","height","format","Format","minFilter","TextureFilter","magFilter","direction","readValue","uWrap","TextureWrap","clampToEdge","vWrap","repeat","texture","rendererObject","pages","console","log","region","rotate","x","y","v","u2","v2","resolution","abs","splits","pads","originalWidth","originalHeight","offsetX","offsetY","regions","baseUrl","crossOrigin","texturesLoading","findRegion","dispose","destroy","updateUVs","intensity","luminanceAlpha","rgb565","rgba4444","rgb888","rgba8888","nearest","linear","mipMap","mipMapNearestNearest","mipMapLinearNearest","mipMapNearestLinear","mipMapLinearLinear","mirroredRepeat","../loaders/syncImageLoaderAdapter.js","./AtlasPage","./AtlasReader","./AtlasRegion",6,"RegionAttachment","MeshAttachment","WeightedMeshAttachment","BoundingBoxAttachment","AtlasAttachmentParser","atlas","newRegionAttachment","skin","path","attachment","setUVs","regionOffsetX","regionOffsetY","regionWidth","regionHeight","regionOriginalWidth","regionOriginalHeight","newMeshAttachment","regionU","regionV","regionU2","regionV2","regionRotate","newWeightedMeshAttachment","newBoundingBoxAttachment","./BoundingBoxAttachment","./MeshAttachment","./RegionAttachment","./WeightedMeshAttachment",7,8,"text","lines","split","value","replace","colon","indexOf","substring","lastMatch","comma","substr",9,10,"Curves","AttachmentTimeline","frameCount","curves","frames","attachmentNames","slotIndex","getFrameCount","setFrame","frameIndex","attachmentName","firedEvents","Number","MAX_VALUE","slots","setAttachment","getAttachmentBySlotIndex","./Animation","./Curves",11,"AttachmentType","boundingbox","mesh","weightedmesh","skinnedmesh","linkedmesh","weightedlinkedmesh",12,"Bone","boneData","parent","matrix","Matrix","setToSetupPose","yDown","rotation","rotationIK","scaleX","scaleY","flipX","flipY","worldSignX","worldSignY","updateWorldTransform","cos","degRad","sin","la","lb","lc","ld","m","c","b","d","tx","ty","signum","pa","pb","pc","pd","inheritRotation","inheritScale","temp","psx","psy","za","zb","zc","zd","worldToLocal","world","dx","dy","invDet","localToWorld","local","localX","localY","getWorldRotationX","atan2","radDeg","getWorldRotationY","getWorldScaleX","sqrt","getWorldScaleY","Object","defineProperties","worldX","get","worldY",13,"BoneData",14,"vertices","type","computeWorldVertices","bone","worldVertices","m00","m01","m10","m11","px","py","./AttachmentType",15,"ColorTimeline","g","prevFrameR","prevFrameG","prevFrameB","prevFrameA","frameTime","percent","getCurvePercent","slot",16,"setLinear","setStepped","setCurve","cx1","cy1","cx2","cy2","subdiv1","subdiv2","subdiv3","pre1","pre2","pre4","pre5","tmp1x","tmp1y","tmp2x","tmp2y","dfx","dfy","ddfx","ddfy","dddfx","dddfy","start","prevX","prevY",17,"DrawOrderTimeline","drawOrders","drawOrder","drawOrderToSetupIndex",18,"Event","intValue","floatValue","stringValue",19,"EventData",20,"EventTimeline","frame",21,"FfdTimeline","frameVertices","slotAttachment","applyFFD","vertexCount","attachmentVertices","k","lastVertices","prevVertices","nextVertices","prev",22,"IkConstraint","bendDirection","bones","findBone","apply1","apply2","targetX","targetY","parentRotation","child","bendDir","offset1","offset2","sign2","csx","cy","pp","ppm","wx","wy","a1","a2","l1","l2","outer","acos","ta","aa","bb","ll","dd","c0","c1","c2","q","r0","r1","minAngle","minDist","Infinity","minX","minY","maxAngle","maxDist","maxX","maxY","dist","PI","angle","offset",23,"IkConstraintData",24,"IkConstraintTimeline","ikConstraintIndex","ikConstraint","ikConstraints","prevFrameMix",25,"parentMesh","inheritFFD","uvs","regionUVs","triangles","hullLength","edges","Float32Array","verticesCount","vx","vy","sourceAttachment","setParentMesh",26,"updateOffset","regionScaleX","regionScaleY","localX2","localY2","radians","localXCos","localXSin","localYCos","localYSin","localX2Cos","localX2Sin","localY2Cos","localY2Sin","computeVertices",27,"RotateTimeline","boneIndex","amount","prevFrameValue",28,"ScaleTimeline","prevFrameX","prevFrameY",29,"Slot","Skeleton","slotData","boneCache","updateCache","ikConstraintsCount","arrayCount","nonIkBones","cacheBones","setBonesToSetupPose","setSlotsToSetupPose","getRootBone","boneName","findBoneIndex","findSlot","slotName","findSlotIndex","setSkinByName","skinName","findSkin","setSkin","newSkin","_attachAll","getAttachment","getAttachmentBySlotName","defaultSkin","findIkConstraint","ikConstraintName","./Bone","./IkConstraint","./Slot",30,"SkeletonBounds","polygonPool","polygons","boundingBoxes","updateAabb","slotCount","boundingBox","polygon","poolCount","splice","aabbCompute","MIN_VALUE","min","max","aabbContainsPoint","aabbIntersectsSegment","x1","y1","x2","y2","aabbIntersectsSkeleton","bounds","containsPoint","polygonContainsPoint","intersectsSegment","prevIndex","inside","vertexY","vertexX","polygonIntersectsSegment","width12","height12","det1","x3","y3","x4","y4","det2","width34","height34","det3","getPolygon","getWidth","getHeight","../SpineRuntime",31,"SkeletonData","skins","animations","version","hash","findEvent","eventName",32,"LinkedMesh","SlotData","Skin","TranslateTimeline","SkeletonJsonParser","attachmentLoader","linkedMeshes","scale","readSkeletonData","root","skeletonMap","boneMap","ik","ikMap","ikConstraintData","slotMap","color","toColor","blendMode","PIXI_BLEND_MODE_MAP","skinMap","slotEntry","readAttachment","addAttachment","size","linkedMesh","eventMap","eventData","readAnimation","map","getFloatArray","getIntArray","weights","boneCount","timelineName","timeline","valueMap","readCurve","timelineScale","ffd","meshMap","meshName","isMesh","verticesValue","j","meshVertices","drawOrderValues","drawOrderMap","offsets","unchanged","originalIndex","unchangedIndex","offsetMap","curve","Array","hexString","colorIndex","list","Uint16Array","./AttachmentTimeline","./BoneData","./ColorTimeline","./DrawOrderTimeline","./Event","./EventData","./EventTimeline","./FfdTimeline","./IkConstraintData","./IkConstraintTimeline","./RotateTimeline","./ScaleTimeline","./SkeletonData","./Skin","./SlotData","./TranslateTimeline",33,"attachments","oldSkin",34,"_attachmentTime","setAttachmentTime","getAttachmentTime","slotDatas",35,"multiply","BLEND_MODES","MULTIPLY","screen","SCREEN","additive","ADD","normal","NORMAL",36,37,38,"weight","skeletonBones","w",39,"./AnimationState","./AnimationStateData","./Atlas","./AtlasAttachmentParser","./Skeleton","./SkeletonBounds","./SkeletonJsonParser","./Skin.js",40,41,"spineData","Container","state","slotContainers","slotContainer","addChild","spriteName","sprite","createSprite","currentSprite","currentSpriteName","createMesh","currentMesh","currentMeshName","autoUpdate","SlotContainerUpdateTransformV3","pt","worldTransform","wt","lt","localTransform","worldAlpha","_currentBounds","atlasParser","fromAtlas","resourceName","AnimCache","create","constructor","globalAutoUpdate","updateTransform","autoUpdateTransform","set","dt","children","undefined","visible","sprites","transform","_dirtyLocal","TransformStatic","_dirtyParentVersion","_versionLocal","copy","displayObjectUpdateTransform","tint","utils","rgb2hex","meshes","Date","now","timeDelta","descriptor","baseTexture","spriteRect","Rectangle","spriteTexture","Texture","Sprite","baseRotation","anchor","position","strip","Mesh","DRAW_MODES","TRIANGLES","canvasPadding","../loaders/atlasParser",42,"Loader","addPixiMiddleware","loader","use","./atlasParser",43,"Resource","imageLoaderAdapter","resource","isJson","atlasPath","url","lastIndexOf","atlasOptions","xhrType","XHR_RESPONSE_TYPE","TEXT","metadata","spineMetadata","imageOptions","imageMetadata","adapter","add","res","xhr","responseText","spineAtlas","spineJsonParser","enableCaching","./imageLoaderAdapter",44,"namePrefix",45,"./Loader","./syncImageLoaderAdapter",46,"BaseTexture","fromImage"],"mappings":"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","file":"pixi-spine.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\r\n * @namespace PIXI.spine\r\n */\r\nmodule.exports = PIXI.spine = {\r\n    Spine:          require('./Spine'),\r\n    SpineRuntime:   require('./SpineRuntime'),\r\n    loaders:        require('./loaders')\r\n};\r\n",null,"var spine = require('../SpineUtil');\r\nspine.Animation = function (name, timelines, duration)\r\n{\r\n    this.name = name;\r\n    this.timelines = timelines;\r\n    this.duration = duration;\r\n};\r\nspine.Animation.prototype = {\r\n    apply: function (skeleton, lastTime, time, loop, events)\r\n    {\r\n        if (loop && this.duration != 0)\r\n        {\r\n            time %= this.duration;\r\n            lastTime %= this.duration;\r\n        }\r\n        var timelines = this.timelines;\r\n        for (var i = 0, n = timelines.length; i < n; i++)\r\n            timelines[i].apply(skeleton, lastTime, time, events, 1);\r\n    },\r\n    mix: function (skeleton, lastTime, time, loop, events, alpha)\r\n    {\r\n        if (loop && this.duration != 0)\r\n        {\r\n            time %= this.duration;\r\n            lastTime %= this.duration;\r\n        }\r\n        var timelines = this.timelines;\r\n        for (var i = 0, n = timelines.length; i < n; i++)\r\n            timelines[i].apply(skeleton, lastTime, time, events, alpha);\r\n    }\r\n};\r\nspine.Animation.binarySearch = function (values, target, step)\r\n{\r\n    var low = 0;\r\n    var high = Math.floor(values.length / step) - 2;\r\n    if (!high) return step;\r\n    var current = high >>> 1;\r\n    while (true)\r\n    {\r\n        if (values[(current + 1) * step] <= target)\r\n            low = current + 1;\r\n        else\r\n            high = current;\r\n        if (low == high) return (low + 1) * step;\r\n        current = (low + high) >>> 1;\r\n    }\r\n};\r\nspine.Animation.binarySearch1 = function (values, target)\r\n{\r\n    var low = 0;\r\n    var high = values.length - 2;\r\n    if (!high) return 1;\r\n    var current = high >>> 1;\r\n    while (true)\r\n    {\r\n        if (values[current + 1] <= target)\r\n            low = current + 1;\r\n        else\r\n            high = current;\r\n        if (low == high) return low + 1;\r\n        current = (low + high) >>> 1;\r\n    }\r\n};\r\nspine.Animation.linearSearch = function (values, target, step)\r\n{\r\n    for (var i = 0, last = values.length - step; i <= last; i += step)\r\n        if (values[i] > target) return i;\r\n    return -1;\r\n};\r\nmodule.exports = spine.Animation;\r\n","var spine = require('../SpineUtil');\r\nspine.TrackEntry = require('./TrackEntry');\r\nspine.AnimationState = function (stateData)\r\n{\r\n    this.data = stateData;\r\n    this.tracks = [];\r\n    this.events = [];\r\n};\r\nspine.AnimationState.prototype = {\r\n    onStart: null,\r\n    onEnd: null,\r\n    onComplete: null,\r\n    onEvent: null,\r\n    timeScale: 1,\r\n    update: function (delta)\r\n    {\r\n        delta *= this.timeScale;\r\n        for (var i = 0; i < this.tracks.length; i++)\r\n        {\r\n            var current = this.tracks[i];\r\n            if (!current) continue;\r\n\r\n            current.time += delta * current.timeScale;\r\n            if (current.previous)\r\n            {\r\n                var previousDelta = delta * current.previous.timeScale;\r\n                current.previous.time += previousDelta;\r\n                current.mixTime += previousDelta;\r\n            }\r\n\r\n            var next = current.next;\r\n            if (next)\r\n            {\r\n                next.time = current.lastTime - next.delay;\r\n                if (next.time >= 0) this.setCurrent(i, next);\r\n            } else {\r\n                // End non-looping animation when it reaches its end time and there is no next entry.\r\n                if (!current.loop && current.lastTime >= current.endTime) this.clearTrack(i);\r\n            }\r\n        }\r\n    },\r\n    apply: function (skeleton)\r\n    {\r\n        skeleton.resetDrawOrder();\r\n\r\n        for (var i = 0; i < this.tracks.length; i++)\r\n        {\r\n            var current = this.tracks[i];\r\n            if (!current) continue;\r\n\r\n            this.events.length = 0;\r\n\r\n            var time = current.time;\r\n            var lastTime = current.lastTime;\r\n            var endTime = current.endTime;\r\n            var loop = current.loop;\r\n            if (!loop && time > endTime) time = endTime;\r\n\r\n            var previous = current.previous;\r\n            if (!previous)\r\n            {\r\n                if (current.mix == 1)\r\n                    current.animation.apply(skeleton, current.lastTime, time, loop, this.events);\r\n                else\r\n                    current.animation.mix(skeleton, current.lastTime, time, loop, this.events, current.mix);\r\n            } else {\r\n                var previousTime = previous.time;\r\n                if (!previous.loop && previousTime > previous.endTime) previousTime = previous.endTime;\r\n                previous.animation.apply(skeleton, previousTime, previousTime, previous.loop, null);\r\n\r\n                var alpha = current.mixTime / current.mixDuration * current.mix;\r\n                if (alpha >= 1)\r\n                {\r\n                    alpha = 1;\r\n                    current.previous = null;\r\n                }\r\n                current.animation.mix(skeleton, current.lastTime, time, loop, this.events, alpha);\r\n            }\r\n\r\n            for (var ii = 0, nn = this.events.length; ii < nn; ii++)\r\n            {\r\n                var event = this.events[ii];\r\n                if (current.onEvent) current.onEvent(i, event);\r\n                if (this.onEvent) this.onEvent(i, event);\r\n            }\r\n\r\n            // Check if completed the animation or a loop iteration.\r\n            if (loop ? (lastTime % endTime > time % endTime) : (lastTime < endTime && time >= endTime))\r\n            {\r\n                var count = Math.floor(time / endTime);\r\n                if (current.onComplete) current.onComplete(i, count);\r\n                if (this.onComplete) this.onComplete(i, count);\r\n            }\r\n\r\n            current.lastTime = current.time;\r\n        }\r\n    },\r\n    clearTracks: function ()\r\n    {\r\n        for (var i = 0, n = this.tracks.length; i < n; i++)\r\n            this.clearTrack(i);\r\n        this.tracks.length = 0;\r\n    },\r\n    clearTrack: function (trackIndex)\r\n    {\r\n        if (trackIndex >= this.tracks.length) return;\r\n        var current = this.tracks[trackIndex];\r\n        if (!current) return;\r\n\r\n        if (current.onEnd) current.onEnd(trackIndex);\r\n        if (this.onEnd) this.onEnd(trackIndex);\r\n\r\n        this.tracks[trackIndex] = null;\r\n    },\r\n    _expandToIndex: function (index)\r\n    {\r\n        if (index < this.tracks.length) return this.tracks[index];\r\n        while (index >= this.tracks.length)\r\n            this.tracks.push(null);\r\n        return null;\r\n    },\r\n    setCurrent: function (index, entry)\r\n    {\r\n        var current = this._expandToIndex(index);\r\n        if (current)\r\n        {\r\n            var previous = current.previous;\r\n            current.previous = null;\r\n\r\n            if (current.onEnd) current.onEnd(index);\r\n            if (this.onEnd) this.onEnd(index);\r\n\r\n            entry.mixDuration = this.data.getMix(current.animation, entry.animation);\r\n            if (entry.mixDuration > 0)\r\n            {\r\n                entry.mixTime = 0;\r\n                // If a mix is in progress, mix from the closest animation.\r\n                if (previous && current.mixTime / current.mixDuration < 0.5)\r\n                    entry.previous = previous;\r\n                else\r\n                    entry.previous = current;\r\n            }\r\n        }\r\n\r\n        this.tracks[index] = entry;\r\n\r\n        if (entry.onStart) entry.onStart(index);\r\n        if (this.onStart) this.onStart(index);\r\n    },\r\n    setAnimationByName: function (trackIndex, animationName, loop)\r\n    {\r\n        var animation = this.data.skeletonData.findAnimation(animationName);\r\n        if (!animation) throw \"Animation not found: \" + animationName;\r\n        return this.setAnimation(trackIndex, animation, loop);\r\n    },\r\n    /** Set the current animation. Any queued animations are cleared. */\r\n    setAnimation: function (trackIndex, animation, loop)\r\n    {\r\n        var entry = new spine.TrackEntry();\r\n        entry.animation = animation;\r\n        entry.loop = loop;\r\n        entry.endTime = animation.duration;\r\n        this.setCurrent(trackIndex, entry);\r\n        return entry;\r\n    },\r\n    addAnimationByName: function (trackIndex, animationName, loop, delay)\r\n    {\r\n        var animation = this.data.skeletonData.findAnimation(animationName);\r\n        if (!animation) throw \"Animation not found: \" + animationName;\r\n        return this.addAnimation(trackIndex, animation, loop, delay);\r\n    },\r\n    /** Adds an animation to be played delay seconds after the current or last queued animation.\r\n     * @param delay May be <= 0 to use duration of previous animation minus any mix duration plus the negative delay. */\r\n    addAnimation: function (trackIndex, animation, loop, delay)\r\n    {\r\n        var entry = new spine.TrackEntry();\r\n        entry.animation = animation;\r\n        entry.loop = loop;\r\n        entry.endTime = animation.duration;\r\n\r\n        var last = this._expandToIndex(trackIndex);\r\n        if (last)\r\n        {\r\n            while (last.next)\r\n                last = last.next;\r\n            last.next = entry;\r\n        } else\r\n            this.tracks[trackIndex] = entry;\r\n\r\n        if (delay <= 0)\r\n        {\r\n            if (last)\r\n                delay += last.endTime - this.data.getMix(last.animation, animation);\r\n            else\r\n                delay = 0;\r\n        }\r\n        entry.delay = delay;\r\n\r\n        return entry;\r\n    },\r\n    /** May be null. */\r\n    getCurrent: function (trackIndex)\r\n    {\r\n        if (trackIndex >= this.tracks.length) return null;\r\n        return this.tracks[trackIndex];\r\n    }\r\n};\r\nmodule.exports = spine.AnimationState;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.AnimationStateData = function (skeletonData)\r\n{\r\n    this.skeletonData = skeletonData;\r\n    this.animationToMixTime = {};\r\n};\r\nspine.AnimationStateData.prototype = {\r\n    defaultMix: 0,\r\n    setMixByName: function (fromName, toName, duration)\r\n    {\r\n        var from = this.skeletonData.findAnimation(fromName);\r\n        if (!from) throw \"Animation not found: \" + fromName;\r\n        var to = this.skeletonData.findAnimation(toName);\r\n        if (!to) throw \"Animation not found: \" + toName;\r\n        this.setMix(from, to, duration);\r\n    },\r\n    setMix: function (from, to, duration)\r\n    {\r\n        this.animationToMixTime[from.name + \":\" + to.name] = duration;\r\n    },\r\n    getMix: function (from, to)\r\n    {\r\n        var key = from.name + \":\" + to.name;\r\n        return this.animationToMixTime.hasOwnProperty(key) ? this.animationToMixTime[key] : this.defaultMix;\r\n    }\r\n};\r\nmodule.exports = spine.AnimationStateData;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.AtlasReader = require('./AtlasReader');\r\nspine.AtlasPage = require('./AtlasPage');\r\nspine.AtlasRegion = require('./AtlasRegion');\r\nvar syncImageLoaderAdapter = require('../loaders/syncImageLoaderAdapter.js')\r\n\r\nspine.Atlas = function (atlasText, loaderFunction, callback)\r\n{\r\n    //TODO: remove this legacy later\r\n    if (typeof loaderFunction !== \"function\") {\r\n        //old syntax\r\n        var baseUrl = loaderFunction;\r\n        var crossOrigin = callback;\r\n        loaderFunction = syncImageLoaderAdapter(baseUrl, crossOrigin);\r\n        callback = null;\r\n    }\r\n\r\n    this.pages = [];\r\n    this.regions = [];\r\n\r\n    this.texturesLoading = 0;\r\n\r\n    var self = this;\r\n\r\n    var reader = new spine.AtlasReader(atlasText);\r\n    var tuple = [];\r\n    tuple.length = 4;\r\n    var page = null;\r\n\r\n    iterateParser();\r\n\r\n    function iterateParser() {\r\n        while (true) {\r\n            var line = reader.readLine();\r\n            if (line === null) {\r\n                return callback && callback(self);\r\n            }\r\n            line = reader.trim(line);\r\n            if (!line.length)\r\n                page = null;\r\n            else if (!page) {\r\n                page = new spine.AtlasPage();\r\n                page.name = line;\r\n\r\n                if (reader.readTuple(tuple) == 2) { // size is only optional for an atlas packed with an old TexturePacker.\r\n                    page.width = parseInt(tuple[0]);\r\n                    page.height = parseInt(tuple[1]);\r\n                    reader.readTuple(tuple);\r\n                } else {\r\n                    //old format, detect width and height by texture\r\n                }\r\n                page.format = spine.Atlas.Format[tuple[0]];\r\n\r\n                reader.readTuple(tuple);\r\n                page.minFilter = spine.Atlas.TextureFilter[tuple[0]];\r\n                page.magFilter = spine.Atlas.TextureFilter[tuple[1]];\r\n\r\n                var direction = reader.readValue();\r\n                page.uWrap = spine.Atlas.TextureWrap.clampToEdge;\r\n                page.vWrap = spine.Atlas.TextureWrap.clampToEdge;\r\n                if (direction == \"x\")\r\n                    page.uWrap = spine.Atlas.TextureWrap.repeat;\r\n                else if (direction == \"y\")\r\n                    page.vWrap = spine.Atlas.TextureWrap.repeat;\r\n                else if (direction == \"xy\")\r\n                    page.uWrap = page.vWrap = spine.Atlas.TextureWrap.repeat;\r\n\r\n                // @ivanpopelyshev: I so want to use generators and \"yield()\" here, or at least promises\r\n                loaderFunction(line, function (texture) {\r\n                    page.rendererObject = texture;\r\n                    self.pages.push(page);\r\n                    if (!page.width || !page.height) {\r\n                        page.width = texture.width;\r\n                        page.height = texture.height;\r\n                        if (!page.width || !page.height) {\r\n                            console.log(\"ERROR spine atlas page \" + page.name + \": meshes wont work if you dont specify size in atlas (http://www.html5gamedevs.com/topic/18888-pixi-spines-and-meshes/?p=107121)\");\r\n                        }\r\n                    }\r\n                    iterateParser();\r\n                });\r\n                break;\r\n            } else {\r\n                var region = new spine.AtlasRegion();\r\n                region.name = line;\r\n                region.page = page;\r\n\r\n                region.rotate = reader.readValue() == \"true\";\r\n\r\n                reader.readTuple(tuple);\r\n                var x = parseInt(tuple[0]);\r\n                var y = parseInt(tuple[1]);\r\n\r\n                reader.readTuple(tuple);\r\n                var width = parseInt(tuple[0]);\r\n                var height = parseInt(tuple[1]);\r\n\r\n                region.u = x / page.width;\r\n                region.v = y / page.height;\r\n                if (region.rotate) {\r\n                    region.u2 = (x + height) / page.width;\r\n                    region.v2 = (y + width) / page.height;\r\n                } else {\r\n                    region.u2 = (x + width) / page.width;\r\n                    region.v2 = (y + height) / page.height;\r\n                }\r\n                //detected resolution\r\n                var resolution = page.rendererObject.resolution;\r\n                region.x = x / resolution;\r\n                region.y = y / resolution;\r\n                region.width = Math.abs(width) / resolution;\r\n                region.height = Math.abs(height) / resolution;\r\n\r\n                if (reader.readTuple(tuple) == 4) { // split is optional\r\n                    region.splits = [parseInt(tuple[0]), parseInt(tuple[1]), parseInt(tuple[2]), parseInt(tuple[3])];\r\n\r\n                    if (reader.readTuple(tuple) == 4) { // pad is optional, but only present with splits\r\n                        region.pads = [parseInt(tuple[0]), parseInt(tuple[1]), parseInt(tuple[2]), parseInt(tuple[3])];\r\n\r\n                        reader.readTuple(tuple);\r\n                    }\r\n                }\r\n\r\n                region.originalWidth = parseInt(tuple[0]) / resolution;\r\n                region.originalHeight = parseInt(tuple[1]) / resolution;\r\n\r\n                reader.readTuple(tuple);\r\n                region.offsetX = parseInt(tuple[0]) / resolution;\r\n                region.offsetY = parseInt(tuple[1]) / resolution;\r\n\r\n                region.index = parseInt(reader.readValue());\r\n\r\n                self.regions.push(region);\r\n            }\r\n        }\r\n    }\r\n};\r\nspine.Atlas.prototype = {\r\n    findRegion: function (name)\r\n    {\r\n        var regions = this.regions;\r\n        for (var i = 0, n = regions.length; i < n; i++)\r\n            if (regions[i].name == name) return regions[i];\r\n        return null;\r\n    },\r\n    dispose: function ()\r\n    {\r\n        var pages = this.pages;\r\n        for (var i = 0, n = pages.length; i < n; i++)\r\n            pages[i].rendererObject.destroy(true);\r\n    },\r\n    updateUVs: function (page)\r\n    {\r\n        var regions = this.regions;\r\n        for (var i = 0, n = regions.length; i < n; i++)\r\n        {\r\n            var region = regions[i];\r\n            if (region.page != page) continue;\r\n            region.u = region.x / page.width;\r\n            region.v = region.y / page.height;\r\n            if (region.rotate)\r\n            {\r\n                region.u2 = (region.x + region.height) / page.width;\r\n                region.v2 = (region.y + region.width) / page.height;\r\n            } else {\r\n                region.u2 = (region.x + region.width) / page.width;\r\n                region.v2 = (region.y + region.height) / page.height;\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nspine.Atlas.Format = {\r\n    alpha: 0,\r\n    intensity: 1,\r\n    luminanceAlpha: 2,\r\n    rgb565: 3,\r\n    rgba4444: 4,\r\n    rgb888: 5,\r\n    rgba8888: 6\r\n};\r\n\r\nspine.Atlas.TextureFilter = {\r\n    nearest: 0,\r\n    linear: 1,\r\n    mipMap: 2,\r\n    mipMapNearestNearest: 3,\r\n    mipMapLinearNearest: 4,\r\n    mipMapNearestLinear: 5,\r\n    mipMapLinearLinear: 6\r\n};\r\n\r\nspine.Atlas.TextureWrap = {\r\n    mirroredRepeat: 0,\r\n    clampToEdge: 1,\r\n    repeat: 2\r\n};\r\nmodule.exports = spine.Atlas;\r\n","var spine = require('../SpineUtil');\nspine.RegionAttachment = require('./RegionAttachment');\nspine.MeshAttachment = require('./MeshAttachment');\nspine.WeightedMeshAttachment = require('./WeightedMeshAttachment');\nspine.BoundingBoxAttachment = require('./BoundingBoxAttachment');\nspine.AtlasAttachmentParser = function (atlas)\n{\n    this.atlas = atlas;\n};\nspine.AtlasAttachmentParser.prototype = {\n    newRegionAttachment: function (skin, name, path)\n    {\n        var region = this.atlas.findRegion(path);\n        if (!region) throw \"Region not found in atlas: \" + path + \" (region attachment: \" + name + \")\";\n        var attachment = new spine.RegionAttachment(name);\n        attachment.rendererObject = region;\n        attachment.setUVs(region.u, region.v, region.u2, region.v2, region.rotate);\n        attachment.regionOffsetX = region.offsetX;\n        attachment.regionOffsetY = region.offsetY;\n        attachment.regionWidth = region.width;\n        attachment.regionHeight = region.height;\n        attachment.regionOriginalWidth = region.originalWidth;\n        attachment.regionOriginalHeight = region.originalHeight;\n        return attachment;\n    },\n    newMeshAttachment: function (skin, name, path)\n    {\n        var region = this.atlas.findRegion(path);\n        if (!region) throw \"Region not found in atlas: \" + path + \" (mesh attachment: \" + name + \")\";\n        var attachment = new spine.MeshAttachment(name);\n        attachment.rendererObject = region;\n        attachment.regionU = region.u;\n        attachment.regionV = region.v;\n        attachment.regionU2 = region.u2;\n        attachment.regionV2 = region.v2;\n        attachment.regionRotate = region.rotate;\n        attachment.regionOffsetX = region.offsetX;\n        attachment.regionOffsetY = region.offsetY;\n        attachment.regionWidth = region.width;\n        attachment.regionHeight = region.height;\n        attachment.regionOriginalWidth = region.originalWidth;\n        attachment.regionOriginalHeight = region.originalHeight;\n        return attachment;\n    },\n    newWeightedMeshAttachment: function (skin, name, path)\n    {\n        var region = this.atlas.findRegion(path);\n        if (!region) throw \"Region not found in atlas: \" + path + \" (skinned mesh attachment: \" + name + \")\";\n        var attachment = new spine.WeightedMeshAttachment(name);\n        attachment.rendererObject = region;\n        attachment.regionU = region.u;\n        attachment.regionV = region.v;\n        attachment.regionU2 = region.u2;\n        attachment.regionV2 = region.v2;\n        attachment.regionRotate = region.rotate;\n        attachment.regionOffsetX = region.offsetX;\n        attachment.regionOffsetY = region.offsetY;\n        attachment.regionWidth = region.width;\n        attachment.regionHeight = region.height;\n        attachment.regionOriginalWidth = region.originalWidth;\n        attachment.regionOriginalHeight = region.originalHeight;\n        return attachment;\n    },\n    newBoundingBoxAttachment: function (skin, name)\n    {\n        return new spine.BoundingBoxAttachment(name);\n    }\n};\nmodule.exports = spine.AtlasAttachmentParser;\n\n","var spine = require('../SpineUtil');\r\nspine.AtlasPage = function ()\r\n{};\r\nspine.AtlasPage.prototype = {\r\n    name: null,\r\n    format: null,\r\n    minFilter: null,\r\n    magFilter: null,\r\n    uWrap: null,\r\n    vWrap: null,\r\n    rendererObject: null,\r\n    width: 0,\r\n    height: 0\r\n};\r\nmodule.exports = spine.AtlasPage;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.AtlasReader = function (text)\r\n{\r\n    this.lines = text.split(/\\r\\n|\\r|\\n/);\r\n};\r\nspine.AtlasReader.prototype = {\r\n    index: 0,\r\n    trim: function (value)\r\n    {\r\n        return value.replace(/^\\s+|\\s+$/g, \"\");\r\n    },\r\n    readLine: function ()\r\n    {\r\n        if (this.index >= this.lines.length) return null;\r\n        return this.lines[this.index++];\r\n    },\r\n    readValue: function ()\r\n    {\r\n        var line = this.readLine();\r\n        var colon = line.indexOf(\":\");\r\n        if (colon == -1) throw \"Invalid line: \" + line;\r\n        return this.trim(line.substring(colon + 1));\r\n    },\r\n    /** Returns the number of tuple values read (1, 2 or 4). */\r\n    readTuple: function (tuple)\r\n    {\r\n        var line = this.readLine();\r\n        var colon = line.indexOf(\":\");\r\n        if (colon == -1) throw \"Invalid line: \" + line;\r\n        var i = 0, lastMatch = colon + 1;\r\n        for (; i < 3; i++)\r\n        {\r\n            var comma = line.indexOf(\",\", lastMatch);\r\n            if (comma == -1) break;\r\n            tuple[i] = this.trim(line.substr(lastMatch, comma - lastMatch));\r\n            lastMatch = comma + 1;\r\n        }\r\n        tuple[i] = this.trim(line.substring(lastMatch));\r\n        return i + 1;\r\n    }\r\n};\r\nmodule.exports = spine.AtlasReader;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.AtlasRegion = function ()\r\n{};\r\nspine.AtlasRegion.prototype = {\r\n    page: null,\r\n    name: null,\r\n    x: 0, y: 0,\r\n    width: 0, height: 0,\r\n    u: 0, v: 0, u2: 0, v2: 0,\r\n    offsetX: 0, offsetY: 0,\r\n    originalWidth: 0, originalHeight: 0,\r\n    index: 0,\r\n    rotate: false,\r\n    splits: null,\r\n    pads: null\r\n};\r\nmodule.exports = spine.AtlasRegion;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.Curves = require('./Curves');\r\nspine.Animation = require('./Animation');\r\nspine.AttachmentTimeline = function (frameCount)\r\n{\r\n    this.curves = new spine.Curves(frameCount);\r\n    this.frames = []; // time, ...\r\n    this.frames.length = frameCount;\r\n    this.attachmentNames = [];\r\n    this.attachmentNames.length = frameCount;\r\n};\r\nspine.AttachmentTimeline.prototype = {\r\n    slotIndex: 0,\r\n    getFrameCount: function ()\r\n    {\r\n        return this.frames.length;\r\n    },\r\n    setFrame: function (frameIndex, time, attachmentName)\r\n    {\r\n        this.frames[frameIndex] = time;\r\n        this.attachmentNames[frameIndex] = attachmentName;\r\n    },\r\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\r\n    {\r\n        var frames = this.frames;\r\n        if (time < frames[0])\r\n        {\r\n            if (lastTime > time) this.apply(skeleton, lastTime, Number.MAX_VALUE, null, 0);\r\n            return;\r\n        } else if (lastTime > time) //\r\n            lastTime = -1;\r\n\r\n        var frameIndex = time >= frames[frames.length - 1] ? frames.length - 1 : spine.Animation.binarySearch1(frames, time) - 1;\r\n        if (frames[frameIndex] < lastTime) return;\r\n\r\n        var attachmentName = this.attachmentNames[frameIndex];\r\n        skeleton.slots[this.slotIndex].setAttachment(\r\n            !attachmentName ? null : skeleton.getAttachmentBySlotIndex(this.slotIndex, attachmentName));\r\n    }\r\n};\r\nmodule.exports = spine.AttachmentTimeline;\r\n\r\n","var spine = require('../SpineUtil');\nspine.AttachmentType = {\n    region: 0,\n    boundingbox: 1,\n    mesh: 2,\n    weightedmesh : 3,\n    skinnedmesh: 3,\n    linkedmesh: 4,\n    weightedlinkedmesh: 5\n};\nmodule.exports = spine.AttachmentType;\n\n","var spine = require('../SpineUtil');\nspine.Bone = function (boneData, skeleton, parent)\n{\n    this.data = boneData;\n    this.skeleton = skeleton;\n    this.parent = parent;\n    this.matrix = new PIXI.Matrix();\n    this.setToSetupPose();\n};\nspine.Bone.yDown = false;\nspine.Bone.prototype = {\n    x: 0, y: 0,\n    rotation: 0, rotationIK: 0,\n    scaleX: 1, scaleY: 1,\n    flipX: false, flipY: false,\n\n    worldSignX: 1, worldSignY: 1,\n    updateWorldTransform: function() {\n        var rotation = this.rotationIK;\n        var scaleX = this.scaleX;\n        var scaleY = this.scaleY;\n        var x = this.x;\n        var y = this.y;\n\n        var cos = Math.cos(rotation * spine.degRad), sin = Math.sin(rotation * spine.degRad);\n        var la = cos * scaleX, lb = -sin * scaleY, lc = sin * scaleX, ld = cos * scaleY;\n        var parent = this.parent;\n        var m = this.matrix;\n        var skeleton = this.skeleton;\n        if (!parent) { // Root bone.\n            if (skeleton.flipX) {\n                x = -x;\n                la = -la;\n                lb = -lb;\n            }\n            if (skeleton.flipY !== spine.Bone.yDown) {\n                y = -y;\n                lc = -lc;\n                ld = -ld;\n            }\n            m.a = la;\n            m.c = lb;\n            m.b = lc;\n            m.d = ld;\n            m.tx = x;\n            m.ty = y;\n            this.worldSignX = spine.signum(scaleX);\n            this.worldSignY = spine.signum(scaleY);\n            return;\n        }\n\n\n        var pa = parent.matrix.a, pb = parent.matrix.c, pc = parent.matrix.b, pd = parent.matrix.d;\n        m.tx = pa * x + pb * y + parent.matrix.tx;\n        m.ty = pc * x + pd * y + parent.matrix.ty;\n        this.worldSignX = parent.worldSignX * spine.signum(scaleX);\n        this.worldSignY = parent.worldSignY * spine.signum(scaleY);\n        var data = this.data;\n\n        if (data.inheritRotation && data.inheritScale) {\n            m.a = pa * la + pb * lc;\n            m.c = pa * lb + pb * ld;\n            m.b = pc * la + pd * lc;\n            m.d = pc * lb + pd * ld;\n        } else if (data.inheritRotation) { // No scale inheritance.\n            pa = 1;\n            pb = 0;\n            pc = 0;\n            pd = 1;\n            do {\n                cos = Math.cos(parent.rotationIK * spine.degRad);\n                sin = Math.sin(parent.rotationIK * spine.degRad);\n                var temp = pa * cos + pb * sin;\n                pb = pa * -sin + pb * cos;\n                pa = temp;\n                temp = pc * cos + pd * sin;\n                pd = pc * -sin + pd * cos;\n                pc = temp;\n\n                if (!parent.data.inheritRotation) break;\n                parent = parent.parent;\n            } while (parent != null);\n            m.a = pa * la + pb * lc;\n            m.c = pa * lb + pb * ld;\n            m.b = pc * la + pd * lc;\n            m.d = pc * lb + pd * ld;\n            if (skeleton.flipX) {\n                m.a = -m.a;\n                m.c = -m.c;\n            }\n            if (skeleton.flipY !== spine.Bone.yDown) {\n                m.b = -m.b;\n                m.d = -m.d;\n            }\n        } else if (data.inheritScale) { // No rotation inheritance.\n            pa = 1;\n            pb = 0;\n            pc = 0;\n            pd = 1;\n            do {\n                var r = parent.rotation;\n                cos = Math.cos(r * spine.degRad);\n                sin = Math.sin(r * spine.degRad);\n                var psx = parent.scaleX, psy = parent.scaleY;\n                var za = cos * psx, zb = -sin * psy, zc = sin * psx, zd = cos * psy;\n                temp = pa * za + pb * zc;\n                pb = pa * zb + pb * zd;\n                pa = temp;\n                temp = pc * za + pd * zc;\n                pd = pc * zb + pd * zd;\n                pc = temp;\n\n                if (psx < 0) {\n                    r = -r;\n                } else {\n                    sin = -sin;\n                }\n                temp = pa * cos + pb * sin;\n                pb = pa * -sin + pb * cos;\n                pa = temp;\n                temp = pc * cos + pd * sin;\n                pd = pc * -sin + pd * cos;\n                pc = temp;\n\n                if (!parent.data.inheritScale) break;\n                parent = parent.parent;\n            } while (parent != null);\n            m.a = pa * la + pb * lc;\n            m.c = pa * lb + pb * ld;\n            m.b = pc * la + pd * lc;\n            m.d = pc * lb + pd * ld;\n            if (skeleton.flipX) {\n                m.a = -m.a;\n                m.c = -m.c;\n            }\n            if (skeleton.flipY !== spine.Bone.yDown) {\n                m.b = -m.b;\n                m.d = -m.d;\n            }\n        } else {\n            m.a = la;\n            m.c = lb;\n            m.b = lc;\n            m.d = ld;\n        }\n    },\n\n    setToSetupPose: function ()\n    {\n        var data = this.data;\n        this.x = data.x;\n        this.y = data.y;\n        this.rotation = data.rotation;\n        this.rotationIK = this.rotation;\n        this.scaleX = data.scaleX;\n        this.scaleY = data.scaleY;\n    },\n    worldToLocal: function (world)\n    {\n        var m = this.matrix;\n        var dx = world[0] - m.tx, dy = m.ty;\n        var invDet = 1 / (m.a * m.d - m.b * m.c);\n        //Yep, its a bug in original spine. I hope they'll fix it: https://github.com/EsotericSoftware/spine-runtimes/issues/544\n        world[0] = dx * m.a * invDet - dy * m.c * invDet;\n        world[1] = dy * m.d * invDet - dx * m.b * invDet;\n    },\n    localToWorld: function (local)\n    {\n        var localX = local[0], localY = local[1];\n        var m = this.matrix;\n        local[0] = localX * m.a + localY * m.c + m.tx;\n        local[1] = localX * m.b + localY * m.d + m.ty;\n    },\n    getWorldRotationX: function() {\n        return Math.atan2(this.matrix.b, this.matrix.a) * spine.radDeg;\n\n    },\n    getWorldRotationY: function() {\n        return Math.atan2(this.matrix.d, this.matrix.c) * spine.radDeg;\n    },\n    getWorldScaleX: function() {\n        var a = this.matrix.a;\n        var b = this.matrix.b;\n        return Math.sqrt(a*a+b*b);\n    },\n    getWorldScaleY: function() {\n        var c = this.matrix.c;\n        var d = this.matrix.d;\n        return Math.sqrt(c * c + d * d);\n    }\n};\n\nObject.defineProperties(spine.Bone.prototype, {\n    worldX: {\n        get: function() {\n            return this.matrix.tx;\n        }\n    },\n    worldY:  {\n        get: function() {\n            return this.matrix.ty;\n        }\n    }\n});\n\nmodule.exports = spine.Bone;\n","var spine = require('../SpineUtil');\nspine.BoneData = function (name, parent)\n{\n    this.name = name;\n    this.parent = parent;\n};\nspine.BoneData.prototype = {\n    length: 0,\n    x: 0, y: 0,\n    rotation: 0,\n    scaleX: 1, scaleY: 1,\n    inheritScale: true,\n    inheritRotation: true\n};\nmodule.exports = spine.BoneData;\n\n","var spine = require('../SpineUtil');\nspine.AttachmentType = require('./AttachmentType');\nspine.BoundingBoxAttachment = function (name)\n{\n    this.name = name;\n    this.vertices = [];\n};\nspine.BoundingBoxAttachment.prototype = {\n    type: spine.AttachmentType.boundingbox,\n    computeWorldVertices: function (x, y, bone, worldVertices)\n    {\n        x += bone.worldX;\n        y += bone.worldY;\n        var m00 = bone.a, m01 = bone.c, m10 = bone.b, m11 = bone.d;\n        var vertices = this.vertices;\n        for (var i = 0, n = vertices.length; i < n; i += 2)\n        {\n            var px = vertices[i];\n            var py = vertices[i + 1];\n            worldVertices[i] = px * m00 + py * m01 + x;\n            worldVertices[i + 1] = px * m10 + py * m11 + y;\n        }\n    }\n};\nmodule.exports = spine.BoundingBoxAttachment;\n\n","var spine = require('../SpineUtil');\r\nspine.Animation = require('./Animation');\r\nspine.Curves = require('./Curves');\r\nspine.ColorTimeline = function (frameCount)\r\n{\r\n    this.curves = new spine.Curves(frameCount);\r\n    this.frames = []; // time, r, g, b, a, ...\r\n    this.frames.length = frameCount * 5;\r\n};\r\nspine.ColorTimeline.prototype = {\r\n    slotIndex: 0,\r\n    getFrameCount: function ()\r\n    {\r\n        return this.frames.length / 5;\r\n    },\r\n    setFrame: function (frameIndex, time, r, g, b, a)\r\n    {\r\n        frameIndex *= 5;\r\n        this.frames[frameIndex] = time;\r\n        this.frames[frameIndex + 1] = r;\r\n        this.frames[frameIndex + 2] = g;\r\n        this.frames[frameIndex + 3] = b;\r\n        this.frames[frameIndex + 4] = a;\r\n    },\r\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\r\n    {\r\n        var frames = this.frames;\r\n        if (time < frames[0]) return; // Time is before first frame.\r\n\r\n        var r, g, b, a;\r\n        if (time >= frames[frames.length - 5])\r\n        {\r\n            // Time is after last frame.\r\n            var i = frames.length - 1;\r\n            r = frames[i - 3];\r\n            g = frames[i - 2];\r\n            b = frames[i - 1];\r\n            a = frames[i];\r\n        } else {\r\n            // Interpolate between the previous frame and the current frame.\r\n            var frameIndex = spine.Animation.binarySearch(frames, time, 5);\r\n            var prevFrameR = frames[frameIndex - 4];\r\n            var prevFrameG = frames[frameIndex - 3];\r\n            var prevFrameB = frames[frameIndex - 2];\r\n            var prevFrameA = frames[frameIndex - 1];\r\n            var frameTime = frames[frameIndex];\r\n            var percent = 1 - (time - frameTime) / (frames[frameIndex - 5/*PREV_FRAME_TIME*/] - frameTime);\r\n            percent = this.curves.getCurvePercent(frameIndex / 5 - 1, percent);\r\n\r\n            r = prevFrameR + (frames[frameIndex + 1/*FRAME_R*/] - prevFrameR) * percent;\r\n            g = prevFrameG + (frames[frameIndex + 2/*FRAME_G*/] - prevFrameG) * percent;\r\n            b = prevFrameB + (frames[frameIndex + 3/*FRAME_B*/] - prevFrameB) * percent;\r\n            a = prevFrameA + (frames[frameIndex + 4/*FRAME_A*/] - prevFrameA) * percent;\r\n        }\r\n        var slot = skeleton.slots[this.slotIndex];\r\n        if (alpha < 1)\r\n        {\r\n            slot.r += (r - slot.r) * alpha;\r\n            slot.g += (g - slot.g) * alpha;\r\n            slot.b += (b - slot.b) * alpha;\r\n            slot.a += (a - slot.a) * alpha;\r\n        } else {\r\n            slot.r = r;\r\n            slot.g = g;\r\n            slot.b = b;\r\n            slot.a = a;\r\n        }\r\n    }\r\n};\r\nmodule.exports = spine.ColorTimeline;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.Curves = function (frameCount)\r\n{\r\n    this.curves = []; // type, x, y, ...\r\n    //this.curves.length = (frameCount - 1) * 19/*BEZIER_SIZE*/;\r\n};\r\nspine.Curves.prototype = {\r\n    setLinear: function (frameIndex)\r\n    {\r\n        this.curves[frameIndex * 19/*BEZIER_SIZE*/] = 0/*LINEAR*/;\r\n    },\r\n    setStepped: function (frameIndex)\r\n    {\r\n        this.curves[frameIndex * 19/*BEZIER_SIZE*/] = 1/*STEPPED*/;\r\n    },\r\n    /** Sets the control handle positions for an interpolation bezier curve used to transition from this keyframe to the next.\r\n     * cx1 and cx2 are from 0 to 1, representing the percent of time between the two keyframes. cy1 and cy2 are the percent of\r\n     * the difference between the keyframe's values. */\r\n    setCurve: function (frameIndex, cx1, cy1, cx2, cy2)\r\n    {\r\n        var subdiv1 = 1 / 10/*BEZIER_SEGMENTS*/, subdiv2 = subdiv1 * subdiv1, subdiv3 = subdiv2 * subdiv1;\r\n        var pre1 = 3 * subdiv1, pre2 = 3 * subdiv2, pre4 = 6 * subdiv2, pre5 = 6 * subdiv3;\r\n        var tmp1x = -cx1 * 2 + cx2, tmp1y = -cy1 * 2 + cy2, tmp2x = (cx1 - cx2) * 3 + 1, tmp2y = (cy1 - cy2) * 3 + 1;\r\n        var dfx = cx1 * pre1 + tmp1x * pre2 + tmp2x * subdiv3, dfy = cy1 * pre1 + tmp1y * pre2 + tmp2y * subdiv3;\r\n        var ddfx = tmp1x * pre4 + tmp2x * pre5, ddfy = tmp1y * pre4 + tmp2y * pre5;\r\n        var dddfx = tmp2x * pre5, dddfy = tmp2y * pre5;\r\n\r\n        var i = frameIndex * 19/*BEZIER_SIZE*/;\r\n        var curves = this.curves;\r\n        curves[i++] = 2/*BEZIER*/;\r\n\r\n        var x = dfx, y = dfy;\r\n        for (var n = i + 19/*BEZIER_SIZE*/ - 1; i < n; i += 2)\r\n        {\r\n            curves[i] = x;\r\n            curves[i + 1] = y;\r\n            dfx += ddfx;\r\n            dfy += ddfy;\r\n            ddfx += dddfx;\r\n            ddfy += dddfy;\r\n            x += dfx;\r\n            y += dfy;\r\n        }\r\n    },\r\n    getCurvePercent: function (frameIndex, percent)\r\n    {\r\n        percent = percent < 0 ? 0 : (percent > 1 ? 1 : percent);\r\n        var curves = this.curves;\r\n        var i = frameIndex * 19/*BEZIER_SIZE*/;\r\n        var type = curves[i];\r\n        if (type === 0/*LINEAR*/) return percent;\r\n        if (type == 1/*STEPPED*/) return 0;\r\n        i++;\r\n        var x = 0;\r\n        for (var start = i, n = i + 19/*BEZIER_SIZE*/ - 1; i < n; i += 2)\r\n        {\r\n            x = curves[i];\r\n            if (x >= percent)\r\n            {\r\n                var prevX, prevY;\r\n                if (i == start)\r\n                {\r\n                    prevX = 0;\r\n                    prevY = 0;\r\n                } else {\r\n                    prevX = curves[i - 2];\r\n                    prevY = curves[i - 1];\r\n                }\r\n                return prevY + (curves[i + 1] - prevY) * (percent - prevX) / (x - prevX);\r\n            }\r\n        }\r\n        var y = curves[i - 1];\r\n        return y + (1 - y) * (percent - x) / (1 - x); // Last point is 1,1.\r\n    }\r\n};\r\nmodule.exports = spine.Curves;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.Animation = require('./Animation');\r\nspine.DrawOrderTimeline = function (frameCount)\r\n{\r\n    this.frames = []; // time, ...\r\n    this.frames.length = frameCount;\r\n    this.drawOrders = [];\r\n    this.drawOrders.length = frameCount;\r\n};\r\nspine.DrawOrderTimeline.prototype = {\r\n    getFrameCount: function ()\r\n    {\r\n        return this.frames.length;\r\n    },\r\n    setFrame: function (frameIndex, time, drawOrder)\r\n    {\r\n        this.frames[frameIndex] = time;\r\n        this.drawOrders[frameIndex] = drawOrder;\r\n    },\r\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\r\n    {\r\n        var frames = this.frames;\r\n        if (time < frames[0]) return; // Time is before first frame.\r\n\r\n        var frameIndex;\r\n        if (time >= frames[frames.length - 1]) // Time is after last frame.\r\n            frameIndex = frames.length - 1;\r\n        else\r\n            frameIndex = spine.Animation.binarySearch1(frames, time) - 1;\r\n\r\n        var drawOrder = skeleton.drawOrder;\r\n        var slots = skeleton.slots;\r\n        var drawOrderToSetupIndex = this.drawOrders[frameIndex];\r\n        if (drawOrderToSetupIndex)\r\n        {\r\n            for (var i = 0, n = drawOrderToSetupIndex.length; i < n; i++)\r\n            {\r\n                drawOrder[i] = drawOrderToSetupIndex[i];\r\n            }\r\n        }\r\n\r\n    }\r\n};\r\nmodule.exports = spine.DrawOrderTimeline;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.Event = function (data)\r\n{\r\n    this.data = data;\r\n};\r\nspine.Event.prototype = {\r\n    intValue: 0,\r\n    floatValue: 0,\r\n    stringValue: null\r\n};\r\nmodule.exports = spine.Event;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.EventData = function (name)\r\n{\r\n    this.name = name;\r\n};\r\nspine.EventData.prototype = {\r\n    intValue: 0,\r\n    floatValue: 0,\r\n    stringValue: null\r\n};\r\nmodule.exports = spine.EventData;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.Animation = require('./Animation');\r\nspine.EventTimeline = function (frameCount)\r\n{\r\n    this.frames = []; // time, ...\r\n    this.frames.length = frameCount;\r\n    this.events = [];\r\n    this.events.length = frameCount;\r\n};\r\nspine.EventTimeline.prototype = {\r\n    getFrameCount: function ()\r\n    {\r\n        return this.frames.length;\r\n    },\r\n    setFrame: function (frameIndex, time, event)\r\n    {\r\n        this.frames[frameIndex] = time;\r\n        this.events[frameIndex] = event;\r\n    },\r\n    /** Fires events for frames > lastTime and <= time. */\r\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\r\n    {\r\n        if (!firedEvents) return;\r\n\r\n        var frames = this.frames;\r\n        var frameCount = frames.length;\r\n\r\n        if (lastTime > time)\r\n        { // Fire events after last time for looped animations.\r\n            this.apply(skeleton, lastTime, Number.MAX_VALUE, firedEvents, alpha);\r\n            lastTime = -1;\r\n        } else if (lastTime >= frames[frameCount - 1]) // Last time is after last frame.\r\n            return;\r\n        if (time < frames[0]) return; // Time is before first frame.\r\n\r\n        var frameIndex;\r\n        if (lastTime < frames[0])\r\n            frameIndex = 0;\r\n        else\r\n        {\r\n            frameIndex = spine.Animation.binarySearch1(frames, lastTime);\r\n            var frame = frames[frameIndex];\r\n            while (frameIndex > 0)\r\n            { // Fire multiple events with the same frame.\r\n                if (frames[frameIndex - 1] != frame) break;\r\n                frameIndex--;\r\n            }\r\n        }\r\n        var events = this.events;\r\n        for (; frameIndex < frameCount && time >= frames[frameIndex]; frameIndex++)\r\n            firedEvents.push(events[frameIndex]);\r\n    }\r\n};\r\nmodule.exports = spine.EventTimeline;\r\n\r\n","var spine = require('../SpineUtil');\nspine.Animation = require('./Animation');\nspine.Curves = require('./Curves');\nspine.FfdTimeline = function (frameCount)\n{\n    this.curves = new spine.Curves(frameCount);\n    this.frames = [];\n    this.frames.length = frameCount;\n    this.frameVertices = [];\n    this.frameVertices.length = frameCount;\n};\nspine.FfdTimeline.prototype = {\n    slotIndex: 0,\n    attachment: 0,\n    getFrameCount: function ()\n    {\n        return this.frames.length;\n    },\n    setFrame: function (frameIndex, time, vertices)\n    {\n        this.frames[frameIndex] = time;\n        this.frameVertices[frameIndex] = vertices;\n    },\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\n    {\n        var slot = skeleton.slots[this.slotIndex];\n        var slotAttachment = slot.attachment;\n        if (!slotAttachment.applyFFD || !slotAttachment.applyFFD(this.attachment)) return;\n\n        var frames = this.frames;\n        if (time < frames[0]) return; // Time is before first frame.\n\n        var frameVertices = this.frameVertices;\n        var vertexCount = frameVertices[0].length;\n\n        var vertices = slot.attachmentVertices;\n        if (vertices.length != vertexCount) {\n            vertices = slot.attachmentVertices = [];\n            for (var k = 0; k < vertexCount; k++) vertices.push(0);\n            // Don't mix from uninitialized slot vertices.\n            alpha = 1;\n        }\n\n        if (time >= frames[frames.length - 1])\n        { // Time is after last frame.\n            var lastVertices = frameVertices[frames.length - 1];\n            if (alpha < 1)\n            {\n                for (var i = 0; i < vertexCount; i++)\n                    vertices[i] += (lastVertices[i] - vertices[i]) * alpha;\n            } else {\n                for (var i = 0; i < vertexCount; i++)\n                    vertices[i] = lastVertices[i];\n            }\n            return;\n        }\n\n        // Interpolate between the previous frame and the current frame.\n        var frameIndex = spine.Animation.binarySearch1(frames, time);\n        var frameTime = frames[frameIndex];\n        var percent = 1 - (time - frameTime) / (frames[frameIndex - 1] - frameTime);\n        percent = this.curves.getCurvePercent(frameIndex - 1, percent < 0 ? 0 : (percent > 1 ? 1 : percent));\n\n        var prevVertices = frameVertices[frameIndex - 1];\n        var nextVertices = frameVertices[frameIndex];\n\n        if (alpha < 1)\n        {\n            for (var i = 0; i < vertexCount; i++)\n            {\n                var prev = prevVertices[i];\n                vertices[i] += (prev + (nextVertices[i] - prev) * percent - vertices[i]) * alpha;\n            }\n        } else {\n            for (var i = 0; i < vertexCount; i++)\n            {\n                var prev = prevVertices[i];\n                vertices[i] = prev + (nextVertices[i] - prev) * percent;\n            }\n        }\n    }\n};\nmodule.exports = spine.FfdTimeline;\n\n","var spine = require('../SpineUtil');\nspine.IkConstraint = function (data, skeleton)\n{\n    this.data = data;\n    this.mix = data.mix;\n    this.bendDirection = data.bendDirection;\n\n    this.bones = [];\n    for (var i = 0, n = data.bones.length; i < n; i++)\n        this.bones.push(skeleton.findBone(data.bones[i].name));\n    this.target = skeleton.findBone(data.target.name);\n};\nspine.IkConstraint.prototype = {\n    apply: function ()\n    {\n        var target = this.target;\n        var bones = this.bones;\n        switch (bones.length)\n        {\n        case 1:\n            spine.IkConstraint.apply1(bones[0], target.worldX, target.worldY, this.mix);\n            break;\n        case 2:\n            spine.IkConstraint.apply2(bones[0], bones[1], target.worldX, target.worldY, this.bendDirection, this.mix);\n            break;\n        }\n    }\n};\n/** Adjusts the bone rotation so the tip is as close to the target position as possible. The target is specified in the world\n * coordinate system. */\nspine.IkConstraint.apply1 = function (bone, targetX, targetY, alpha)\n{\n    var parentRotation = bone.parent ? bone.parent.getWorldRotationX(): 0;\n    var rotation = bone.rotation;\n    var rotationIK = Math.atan2(targetY - bone.worldY, targetX - bone.worldX) * spine.radDeg - parentRotation;\n    if ((bone.worldSignX != bone.worldSignY) != (bone.skeleton.flipX != (bone.skeleton.flipY != spine.Bone.yDown))) rotationIK = 360 - rotationIK;\n    if (rotationIK > 180)\n        rotationIK -= 360;\n    else if (rotationIK < -180) rotationIK += 360;\n    bone.rotationIK = rotation + (rotationIK - rotation) * alpha;\n};\n/** Adjusts the parent and child bone rotations so the tip of the child is as close to the target position as possible. The\n * target is specified in the world coordinate system.\n * @param child Any descendant bone of the parent. */\nspine.IkConstraint.apply2 = function (parent, child, targetX, targetY, bendDir, alpha)\n{\n    if (alpha == 0) return;\n    var px = parent.x, py = parent.y, psx = parent.scaleX, psy = parent.scaleY, csx = child.scaleX, cy = child.y;\n    var offset1, offset2, sign2;\n    if (psx < 0) {\n        psx = -psx;\n        offset1 = 180;\n        sign2 = -1;\n    } else {\n        offset1 = 0;\n        sign2 = 1;\n    }\n    if (psy < 0) {\n        psy = -psy;\n        sign2 = -sign2;\n    }\n    if (csx < 0) {\n        csx = -csx;\n        offset2 = 180;\n    } else\n        offset2 = 0;\n    var pp = parent.parent;\n    var ppm = pp.matrix;\n    var tx, ty, dx, dy;\n    if (pp == null) {\n        tx = targetX - px;\n        ty = targetY - py;\n        dx = child.worldX - px;\n        dy = child.worldY - py;\n    } else {\n        var a = ppm.a, b = ppm.c, c = ppm.b, d = ppm.d, invDet = 1 / (a * d - b * c);\n        var wx = ppm.tx, wy = ppm.ty, x = targetX - wx, y = targetY - wy;\n        tx = (x * d - y * b) * invDet - px;\n        ty = (y * a - x * c) * invDet - py;\n        x = child.worldX - wx;\n        y = child.worldY - wy;\n        dx = (x * d - y * b) * invDet - px;\n        dy = (y * a - x * c) * invDet - py;\n    }\n    var l1 = Math.sqrt(dx * dx + dy * dy), l2 = child.data.length * csx, a1, a2;\n    outer:\n        if (Math.abs(psx - psy) <= 0.0001) {\n            l2 *= psx;\n            var cos = (tx * tx + ty * ty - l1 * l1 - l2 * l2) / (2 * l1 * l2);\n            if (cos < -1)\n                cos = -1;\n            else if (cos > 1) cos = 1;\n            a2 = Math.acos(cos) * bendDir;\n            var a = l1 + l2 * cos, o = l2 * Math.sin(a2);\n            a1 = Math.atan2(ty * a - tx * o, tx * a + ty * o);\n        } else {\n            cy = 0;\n            var a = psx * l2, b = psy * l2, ta = Math.atan2(ty, tx);\n            var aa = a * a, bb = b * b, ll = l1 * l1, dd = tx * tx + ty * ty;\n            var c0 = bb * ll + aa * dd - aa * bb, c1 = -2 * bb * l1, c2 = bb - aa;\n            var d = c1 * c1 - 4 * c2 * c0;\n            if (d >= 0) {\n                var q = Math.sqrt(d);\n                if (c1 < 0) q = -q;\n                q = -(c1 + q) / 2;\n                var r0 = q / c2, r1 = c0 / q;\n                var r = Math.abs(r0) < Math.abs(r1) ? r0 : r1;\n                if (r * r <= dd) {\n                    var y = Math.sqrt(dd - r * r) * bendDir;\n                    a1 = ta - Math.atan2(y, r);\n                    a2 = Math.atan2(y / psy, (r - l1) / psx);\n                    break outer;\n                }\n            }\n            var minAngle = 0, minDist = Infinity, minX = 0, minY = 0;\n            var maxAngle = 0, maxDist = 0, maxX = 0, maxY = 0;\n            var x = l1 + a, dist = x * x;\n            if (dist > maxDist) {\n                maxAngle = 0;\n                maxDist = dist;\n                maxX = x;\n            }\n            x = l1 - a;\n            dist = x * x;\n            if (dist < minDist) {\n                minAngle = Math.PI;\n                minDist = dist;\n                minX = x;\n            }\n            var angle = Math.acos(-a * l1 / (aa - bb));\n            x = a * Math.cos(angle) + l1;\n            var y = b * Math.sin(angle);\n            dist = x * x + y * y;\n            if (dist < minDist) {\n                minAngle = angle;\n                minDist = dist;\n                minX = x;\n                minY = y;\n            }\n            if (dist > maxDist) {\n                maxAngle = angle;\n                maxDist = dist;\n                maxX = x;\n                maxY = y;\n            }\n            if (dd <= (minDist + maxDist) / 2) {\n                a1 = ta - Math.atan2(minY * bendDir, minX);\n                a2 = minAngle * bendDir;\n            } else {\n                a1 = ta - Math.atan2(maxY * bendDir, maxX);\n                a2 = maxAngle * bendDir;\n            }\n        }\n    var offset = Math.atan2(cy, child.x) * sign2;\n    a1 = (a1 - offset) * spine.radDeg + offset1;\n    a2 = (a2 + offset) * spine.radDeg * sign2 + offset2;\n    if (a1 > 180)\n        a1 -= 360;\n    else if (a1 < -180) a1 += 360;\n    if (a2 > 180)\n        a2 -= 360;\n    else if (a2 < -180) a2 += 360;\n    var rotation = parent.rotation;\n    parent.rotationIK = rotation + (a1 - rotation) * alpha;\n    rotation = child.rotation;\n    child.rotationIK = rotation + (a2 - rotation) * alpha;\n};\nmodule.exports = spine.IkConstraint;\n\n","var spine = require('../SpineUtil') || {};\r\nspine.IkConstraintData = function (name)\r\n{\r\n    this.name = name;\r\n    this.bones = [];\r\n};\r\nspine.IkConstraintData.prototype = {\r\n    target: null,\r\n    bendDirection: 1,\r\n    mix: 1\r\n};\r\nmodule.exports = spine.IkConstraintData;\r\n\r\n","var spine = require('../SpineUtil') || {};\r\nspine.Animation = require('./Animation');\r\nspine.Curves = require('./Curves');\r\nspine.IkConstraintTimeline = function (frameCount)\r\n{\r\n    this.curves = new spine.Curves(frameCount);\r\n    this.frames = []; // time, mix, bendDirection, ...\r\n    this.frames.length = frameCount * 3;\r\n};\r\nspine.IkConstraintTimeline.prototype = {\r\n    ikConstraintIndex: 0,\r\n    getFrameCount: function ()\r\n    {\r\n        return this.frames.length / 3;\r\n    },\r\n    setFrame: function (frameIndex, time, mix, bendDirection)\r\n    {\r\n        frameIndex *= 3;\r\n        this.frames[frameIndex] = time;\r\n        this.frames[frameIndex + 1] = mix;\r\n        this.frames[frameIndex + 2] = bendDirection;\r\n    },\r\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\r\n    {\r\n        var frames = this.frames;\r\n        if (time < frames[0]) return; // Time is before first frame.\r\n\r\n        var ikConstraint = skeleton.ikConstraints[this.ikConstraintIndex];\r\n\r\n        if (time >= frames[frames.length - 3])\r\n        { // Time is after last frame.\r\n            ikConstraint.mix += (frames[frames.length - 2] - ikConstraint.mix) * alpha;\r\n            ikConstraint.bendDirection = frames[frames.length - 1];\r\n            return;\r\n        }\r\n\r\n        // Interpolate between the previous frame and the current frame.\r\n        var frameIndex = spine.Animation.binarySearch(frames, time, 3);\r\n        var prevFrameMix = frames[frameIndex + -2/*PREV_FRAME_MIX*/];\r\n        var frameTime = frames[frameIndex];\r\n        var percent = 1 - (time - frameTime) / (frames[frameIndex + -3/*PREV_FRAME_TIME*/] - frameTime);\r\n        percent = this.curves.getCurvePercent(frameIndex / 3 - 1, percent);\r\n\r\n        var mix = prevFrameMix + (frames[frameIndex + 1/*FRAME_MIX*/] - prevFrameMix) * percent;\r\n        ikConstraint.mix += (mix - ikConstraint.mix) * alpha;\r\n        ikConstraint.bendDirection = frames[frameIndex + -1/*PREV_FRAME_BEND_DIRECTION*/];\r\n    }\r\n};\r\nmodule.exports = spine.IkConstraintTimeline;\r\n\r\n","var spine = require('../SpineUtil') || {};\nspine.AttachmentType = require('./AttachmentType');\nspine.MeshAttachment = function (name)\n{\n    this.name = name;\n};\nspine.MeshAttachment.prototype = {\n    type: spine.AttachmentType.mesh,\n    parentMesh: null,\n    inheritFFD: false,\n    vertices: null,\n    uvs: null,\n    regionUVs: null,\n    triangles: null,\n    hullLength: 0,\n    r: 1, g: 1, b: 1, a: 1,\n    path: null,\n    rendererObject: null,\n    regionU: 0, regionV: 0, regionU2: 0, regionV2: 0, regionRotate: false,\n    regionOffsetX: 0, regionOffsetY: 0,\n    regionWidth: 0, regionHeight: 0,\n    regionOriginalWidth: 0, regionOriginalHeight: 0,\n    edges: null,\n    width: 0, height: 0,\n    updateUVs: function ()\n    {\n        var width = this.regionU2 - this.regionU, height = this.regionV2 - this.regionV;\n        var n = this.regionUVs.length;\n        if (!this.uvs || this.uvs.length != n)\n        {\n            this.uvs = new spine.Float32Array(n);\n        }\n        if (this.regionRotate)\n        {\n            for (var i = 0; i < n; i += 2)\n            {\n                this.uvs[i] = this.regionU + this.regionUVs[i + 1] * width;\n                this.uvs[i + 1] = this.regionV + height - this.regionUVs[i] * height;\n            }\n        } else {\n            for (var i = 0; i < n; i += 2)\n            {\n                this.uvs[i] = this.regionU + this.regionUVs[i] * width;\n                this.uvs[i + 1] = this.regionV + this.regionUVs[i + 1] * height;\n            }\n        }\n    },\n    computeWorldVertices: function (x, y, slot, worldVertices)\n    {\n        var bone = slot.bone;\n        x += bone.worldX;\n        y += bone.worldY;\n        var m00 = bone.matrix.a, m01 = bone.matrix.c, m10 = bone.matrix.b, m11 = bone.matrix.d;\n        var vertices = this.vertices;\n        var verticesCount = vertices.length;\n        if (slot.attachmentVertices.length == verticesCount) vertices = slot.attachmentVertices;\n        for (var i = 0; i < verticesCount; i += 2)\n        {\n            var vx = vertices[i];\n            var vy = vertices[i + 1];\n            worldVertices[i] = vx * m00 + vy * m01 + x;\n            worldVertices[i + 1] = vx * m10 + vy * m11 + y;\n        }\n    },\n    applyFFD: function(sourceAttachment) {\n        return this === sourceAttachment || (this.inheritFFD && parentMesh === sourceAttachment);\n    },\n    setParentMesh: function(parentMesh) {\n        this.parentMesh = parentMesh;\n        if (parentMesh != null) {\n            this.vertices = parentMesh.vertices;\n            this.regionUVs = parentMesh.regionUVs;\n            this.triangles = parentMesh.triangles;\n            this.hullLength = parentMesh.hullLength;\n        }\n    }\n};\nmodule.exports = spine.MeshAttachment;\n\n","var spine = require('../SpineUtil');\nspine.AttachmentType = require('./AttachmentType');\nspine.RegionAttachment = function (name)\n{\n    this.name = name;\n    this.offset = [];\n    this.offset.length = 8;\n    this.uvs = [];\n    this.uvs.length = 8;\n};\nspine.RegionAttachment.prototype = {\n    type: spine.AttachmentType.region,\n    x: 0, y: 0,\n    rotation: 0,\n    scaleX: 1, scaleY: 1,\n    width: 0, height: 0,\n    r: 1, g: 1, b: 1, a: 1,\n    path: null,\n    rendererObject: null,\n    regionOffsetX: 0, regionOffsetY: 0,\n    regionWidth: 0, regionHeight: 0,\n    regionOriginalWidth: 0, regionOriginalHeight: 0,\n    setUVs: function (u, v, u2, v2, rotate)\n    {\n        var uvs = this.uvs;\n        if (rotate)\n        {\n            uvs[2/*X2*/] = u;\n            uvs[3/*Y2*/] = v2;\n            uvs[4/*X3*/] = u;\n            uvs[5/*Y3*/] = v;\n            uvs[6/*X4*/] = u2;\n            uvs[7/*Y4*/] = v;\n            uvs[0/*X1*/] = u2;\n            uvs[1/*Y1*/] = v2;\n        } else {\n            uvs[0/*X1*/] = u;\n            uvs[1/*Y1*/] = v2;\n            uvs[2/*X2*/] = u;\n            uvs[3/*Y2*/] = v;\n            uvs[4/*X3*/] = u2;\n            uvs[5/*Y3*/] = v;\n            uvs[6/*X4*/] = u2;\n            uvs[7/*Y4*/] = v2;\n        }\n    },\n    updateOffset: function ()\n    {\n        var regionScaleX = this.width / this.regionOriginalWidth * this.scaleX;\n        var regionScaleY = this.height / this.regionOriginalHeight * this.scaleY;\n        var localX = -this.width / 2 * this.scaleX + this.regionOffsetX * regionScaleX;\n        var localY = -this.height / 2 * this.scaleY + this.regionOffsetY * regionScaleY;\n        var localX2 = localX + this.regionWidth * regionScaleX;\n        var localY2 = localY + this.regionHeight * regionScaleY;\n        var radians = this.rotation * spine.degRad;\n        var cos = Math.cos(radians);\n        var sin = Math.sin(radians);\n        var localXCos = localX * cos + this.x;\n        var localXSin = localX * sin;\n        var localYCos = localY * cos + this.y;\n        var localYSin = localY * sin;\n        var localX2Cos = localX2 * cos + this.x;\n        var localX2Sin = localX2 * sin;\n        var localY2Cos = localY2 * cos + this.y;\n        var localY2Sin = localY2 * sin;\n        var offset = this.offset;\n        offset[0/*X1*/] = localXCos - localYSin;\n        offset[1/*Y1*/] = localYCos + localXSin;\n        offset[2/*X2*/] = localXCos - localY2Sin;\n        offset[3/*Y2*/] = localY2Cos + localXSin;\n        offset[4/*X3*/] = localX2Cos - localY2Sin;\n        offset[5/*Y3*/] = localY2Cos + localX2Sin;\n        offset[6/*X4*/] = localX2Cos - localYSin;\n        offset[7/*Y4*/] = localYCos + localX2Sin;\n    },\n    computeVertices: function (x, y, bone, vertices)\n    {\n        x += bone.worldX;\n        y += bone.worldY;\n        var m00 = bone.matrix.a, m01 = bone.matrix.c, m10 = bone.matrix.b, m11 = bone.matrix.d;\n        var offset = this.offset;\n        vertices[0/*X1*/] = offset[0/*X1*/] * m00 + offset[1/*Y1*/] * m01 + x;\n        vertices[1/*Y1*/] = offset[0/*X1*/] * m10 + offset[1/*Y1*/] * m11 + y;\n        vertices[2/*X2*/] = offset[2/*X2*/] * m00 + offset[3/*Y2*/] * m01 + x;\n        vertices[3/*Y2*/] = offset[2/*X2*/] * m10 + offset[3/*Y2*/] * m11 + y;\n        vertices[4/*X3*/] = offset[4/*X3*/] * m00 + offset[5/*X3*/] * m01 + x;\n        vertices[5/*X3*/] = offset[4/*X3*/] * m10 + offset[5/*X3*/] * m11 + y;\n        vertices[6/*X4*/] = offset[6/*X4*/] * m00 + offset[7/*Y4*/] * m01 + x;\n        vertices[7/*Y4*/] = offset[6/*X4*/] * m10 + offset[7/*Y4*/] * m11 + y;\n    }\n};\nmodule.exports = spine.RegionAttachment;\n\n","var spine = require('../SpineUtil') || {};\r\nspine.Animation = require('./Animation');\r\nspine.Curves = require('./Curves');\r\nspine.RotateTimeline = function (frameCount)\r\n{\r\n    this.curves = new spine.Curves(frameCount);\r\n    this.frames = []; // time, angle, ...\r\n    this.frames.length = frameCount * 2;\r\n};\r\nspine.RotateTimeline.prototype = {\r\n    boneIndex: 0,\r\n    getFrameCount: function ()\r\n    {\r\n        return this.frames.length / 2;\r\n    },\r\n    setFrame: function (frameIndex, time, angle)\r\n    {\r\n        frameIndex *= 2;\r\n        this.frames[frameIndex] = time;\r\n        this.frames[frameIndex + 1] = angle;\r\n    },\r\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\r\n    {\r\n        var frames = this.frames;\r\n        if (time < frames[0]) return; // Time is before first frame.\r\n\r\n        var bone = skeleton.bones[this.boneIndex];\r\n\r\n        if (time >= frames[frames.length - 2])\r\n        { // Time is after last frame.\r\n            var amount = bone.data.rotation + frames[frames.length - 1] - bone.rotation;\r\n            while (amount > 180)\r\n                amount -= 360;\r\n            while (amount < -180)\r\n                amount += 360;\r\n            bone.rotation += amount * alpha;\r\n            return;\r\n        }\r\n\r\n        // Interpolate between the previous frame and the current frame.\r\n        var frameIndex = spine.Animation.binarySearch(frames, time, 2);\r\n        var prevFrameValue = frames[frameIndex - 1];\r\n        var frameTime = frames[frameIndex];\r\n        var percent = 1 - (time - frameTime) / (frames[frameIndex - 2/*PREV_FRAME_TIME*/] - frameTime);\r\n        percent = this.curves.getCurvePercent(frameIndex / 2 - 1, percent);\r\n\r\n        var amount = frames[frameIndex + 1/*FRAME_VALUE*/] - prevFrameValue;\r\n        while (amount > 180)\r\n            amount -= 360;\r\n        while (amount < -180)\r\n            amount += 360;\r\n        amount = bone.data.rotation + (prevFrameValue + amount * percent) - bone.rotation;\r\n        while (amount > 180)\r\n            amount -= 360;\r\n        while (amount < -180)\r\n            amount += 360;\r\n        bone.rotation += amount * alpha;\r\n    }\r\n};\r\nmodule.exports = spine.RotateTimeline;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.Animation = require('./Animation');\r\nspine.Curves = require('./Curves');\r\nspine.ScaleTimeline = function (frameCount)\r\n{\r\n    this.curves = new spine.Curves(frameCount);\r\n    this.frames = []; // time, x, y, ...\r\n    this.frames.length = frameCount * 3;\r\n};\r\nspine.ScaleTimeline.prototype = {\r\n    boneIndex: 0,\r\n    getFrameCount: function ()\r\n    {\r\n        return this.frames.length / 3;\r\n    },\r\n    setFrame: function (frameIndex, time, x, y)\r\n    {\r\n        frameIndex *= 3;\r\n        this.frames[frameIndex] = time;\r\n        this.frames[frameIndex + 1] = x;\r\n        this.frames[frameIndex + 2] = y;\r\n    },\r\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\r\n    {\r\n        var frames = this.frames;\r\n        if (time < frames[0]) return; // Time is before first frame.\r\n\r\n        var bone = skeleton.bones[this.boneIndex];\r\n\r\n        if (time >= frames[frames.length - 3])\r\n        { // Time is after last frame.\r\n            bone.scaleX += (bone.data.scaleX * frames[frames.length - 2] - bone.scaleX) * alpha;\r\n            bone.scaleY += (bone.data.scaleY * frames[frames.length - 1] - bone.scaleY) * alpha;\r\n            return;\r\n        }\r\n\r\n        // Interpolate between the previous frame and the current frame.\r\n        var frameIndex = spine.Animation.binarySearch(frames, time, 3);\r\n        var prevFrameX = frames[frameIndex - 2];\r\n        var prevFrameY = frames[frameIndex - 1];\r\n        var frameTime = frames[frameIndex];\r\n        var percent = 1 - (time - frameTime) / (frames[frameIndex + -3/*PREV_FRAME_TIME*/] - frameTime);\r\n        percent = this.curves.getCurvePercent(frameIndex / 3 - 1, percent);\r\n\r\n        bone.scaleX += (bone.data.scaleX * (prevFrameX + (frames[frameIndex + 1/*FRAME_X*/] - prevFrameX) * percent) - bone.scaleX) * alpha;\r\n        bone.scaleY += (bone.data.scaleY * (prevFrameY + (frames[frameIndex + 2/*FRAME_Y*/] - prevFrameY) * percent) - bone.scaleY) * alpha;\r\n    }\r\n};\r\nmodule.exports = spine.ScaleTimeline;\r\n\r\n","var spine = require('../SpineUtil');\nspine.Bone = require('./Bone');\nspine.Slot = require('./Slot');\nspine.IkConstraint = require('./IkConstraint');\nspine.Skeleton = function (skeletonData)\n{\n    this.data = skeletonData;\n\n    this.bones = [];\n    for (var i = 0, n = skeletonData.bones.length; i < n; i++)\n    {\n        var boneData = skeletonData.bones[i];\n        var parent = !boneData.parent ? null : this.bones[skeletonData.bones.indexOf(boneData.parent)];\n        this.bones.push(new spine.Bone(boneData, this, parent));\n    }\n\n    this.slots = [];\n    this.drawOrder = [];\n    for (var i = 0, n = skeletonData.slots.length; i < n; i++)\n    {\n        var slotData = skeletonData.slots[i];\n        var bone = this.bones[skeletonData.bones.indexOf(slotData.boneData)];\n        var slot = new spine.Slot(slotData, bone);\n        this.slots.push(slot);\n        this.drawOrder.push(i);\n    }\n\n    this.ikConstraints = [];\n    for (var i = 0, n = skeletonData.ikConstraints.length; i < n; i++)\n        this.ikConstraints.push(new spine.IkConstraint(skeletonData.ikConstraints[i], this));\n\n    this.boneCache = [];\n    this.updateCache();\n};\nspine.Skeleton.prototype = {\n    x: 0, y: 0,\n    skin: null,\n    r: 1, g: 1, b: 1, a: 1,\n    time: 0,\n    flipX: false, flipY: false,\n    /** Caches information about bones and IK constraints. Must be called if bones or IK constraints are added or removed. */\n    updateCache: function ()\n    {\n        var ikConstraints = this.ikConstraints;\n        var ikConstraintsCount = ikConstraints.length;\n\n        var arrayCount = ikConstraintsCount + 1;\n        var boneCache = this.boneCache;\n        if (boneCache.length > arrayCount) boneCache.length = arrayCount;\n        for (var i = 0, n = boneCache.length; i < n; i++)\n            boneCache[i].length = 0;\n        while (boneCache.length < arrayCount)\n            boneCache[boneCache.length] = [];\n\n        var nonIkBones = boneCache[0];\n        var bones = this.bones;\n\n        outer:\n        for (var i = 0, n = bones.length; i < n; i++)\n        {\n            var bone = bones[i];\n            var current = bone;\n            do {\n                for (var ii = 0; ii < ikConstraintsCount; ii++)\n                {\n                    var ikConstraint = ikConstraints[ii];\n                    var parent = ikConstraint.bones[0];\n                    var child= ikConstraint.bones[ikConstraint.bones.length - 1];\n                    while (true)\n                    {\n                        if (current == child)\n                        {\n                            boneCache[ii].push(bone);\n                            boneCache[ii + 1].push(bone);\n                            continue outer;\n                        }\n                        if (child == parent) break;\n                        child = child.parent;\n                    }\n                }\n                current = current.parent;\n            } while (current);\n            nonIkBones[nonIkBones.length] = bone;\n        }\n    },\n    /** Updates the world transform for each bone. */\n    updateWorldTransform: function ()\n    {\n        var bones = this.bones;\n        for (var i = 0, n = bones.length; i < n; i++)\n        {\n            var bone = bones[i];\n            bone.rotationIK = bone.rotation;\n        }\n        var i = 0, last = this.boneCache.length - 1;\n        while (true)\n        {\n            var cacheBones = this.boneCache[i];\n            for (var ii = 0, nn = cacheBones.length; ii < nn; ii++)\n                cacheBones[ii].updateWorldTransform();\n            if (i == last) break;\n            this.ikConstraints[i].apply();\n            i++;\n        }\n    },\n    /** Sets the bones and slots to their setup pose values. */\n    setToSetupPose: function ()\n    {\n        this.setBonesToSetupPose();\n        this.setSlotsToSetupPose();\n    },\n    setBonesToSetupPose: function ()\n    {\n        var bones = this.bones;\n        for (var i = 0, n = bones.length; i < n; i++)\n            bones[i].setToSetupPose();\n\n        var ikConstraints = this.ikConstraints;\n        for (var i = 0, n = ikConstraints.length; i < n; i++)\n        {\n            var ikConstraint = ikConstraints[i];\n            ikConstraint.bendDirection = ikConstraint.data.bendDirection;\n            ikConstraint.mix = ikConstraint.data.mix;\n        }\n    },\n    setSlotsToSetupPose: function ()\n    {\n        var slots = this.slots;\n        for (var i = 0, n = slots.length; i < n; i++)\n        {\n            slots[i].setToSetupPose(i);\n        }\n\n        this.resetDrawOrder();\n    },\n    /** @return May return null. */\n    getRootBone: function ()\n    {\n        return this.bones.length ? this.bones[0] : null;\n    },\n    /** @return May be null. */\n    findBone: function (boneName)\n    {\n        var bones = this.bones;\n        for (var i = 0, n = bones.length; i < n; i++)\n            if (bones[i].data.name == boneName) return bones[i];\n        return null;\n    },\n    /** @return -1 if the bone was not found. */\n    findBoneIndex: function (boneName)\n    {\n        var bones = this.bones;\n        for (var i = 0, n = bones.length; i < n; i++)\n            if (bones[i].data.name == boneName) return i;\n        return -1;\n    },\n    /** @return May be null. */\n    findSlot: function (slotName)\n    {\n        var slots = this.slots;\n        for (var i = 0, n = slots.length; i < n; i++)\n            if (slots[i].data.name == slotName) return slots[i];\n        return null;\n    },\n    /** @return -1 if the bone was not found. */\n    findSlotIndex: function (slotName)\n    {\n        var slots = this.slots;\n        for (var i = 0, n = slots.length; i < n; i++)\n            if (slots[i].data.name == slotName) return i;\n        return -1;\n    },\n    setSkinByName: function (skinName)\n    {\n        var skin = this.data.findSkin(skinName);\n        if (!skin) throw \"Skin not found: \" + skinName;\n        this.setSkin(skin);\n    },\n    /** Sets the skin used to look up attachments before looking in the {@link SkeletonData#getDefaultSkin() default skin}.\n     * Attachments from the new skin are attached if the corresponding attachment from the old skin was attached. If there was\n     * no old skin, each slot's setup mode attachment is attached from the new skin.\n     * @param newSkin May be null. */\n    setSkin: function (newSkin)\n    {\n        if (newSkin)\n        {\n            if (this.skin)\n                newSkin._attachAll(this, this.skin);\n            else\n            {\n                var slots = this.slots;\n                for (var i = 0, n = slots.length; i < n; i++)\n                {\n                    var slot = slots[i];\n                    var name = slot.data.attachmentName;\n                    if (name)\n                    {\n                        var attachment = newSkin.getAttachment(i, name);\n                        if (attachment) slot.setAttachment(attachment);\n                    }\n                }\n            }\n        }\n        this.skin = newSkin;\n    },\n    /** @return May be null. */\n    getAttachmentBySlotName: function (slotName, attachmentName)\n    {\n        return this.getAttachmentBySlotIndex(this.data.findSlotIndex(slotName), attachmentName);\n    },\n    /** @return May be null. */\n    getAttachmentBySlotIndex: function (slotIndex, attachmentName)\n    {\n        if (this.skin)\n        {\n            var attachment = this.skin.getAttachment(slotIndex, attachmentName);\n            if (attachment) return attachment;\n        }\n        if (this.data.defaultSkin) return this.data.defaultSkin.getAttachment(slotIndex, attachmentName);\n        return null;\n    },\n    /** @param attachmentName May be null. */\n    setAttachment: function (slotName, attachmentName)\n    {\n        var slots = this.slots;\n        for (var i = 0, n = slots.length; i < n; i++)\n        {\n            var slot = slots[i];\n            if (slot.data.name == slotName)\n            {\n                var attachment = null;\n                if (attachmentName)\n                {\n                    attachment = this.getAttachmentBySlotIndex(i, attachmentName);\n                    if (!attachment) throw \"Attachment not found: \" + attachmentName + \", for slot: \" + slotName;\n                }\n                slot.setAttachment(attachment);\n                return;\n            }\n        }\n        throw \"Slot not found: \" + slotName;\n    },\n    /** @return May be null. */\n    findIkConstraint: function (ikConstraintName)\n    {\n        var ikConstraints = this.ikConstraints;\n        for (var i = 0, n = ikConstraints.length; i < n; i++)\n            if (ikConstraints[i].data.name == ikConstraintName) return ikConstraints[i];\n        return null;\n    },\n    update: function (delta)\n    {\n        this.time += delta;\n    },\n    resetDrawOrder: function () {\n        for (var i = 0, n = this.drawOrder.length; i < n; i++)\n        {\n            this.drawOrder[i] = i;\n        }\n    }\n};\nmodule.exports = spine.Skeleton;\n\n","var spine = require('../SpineRuntime') || {};\r\nspine.AttachmentType = require('./AttachmentType');\r\nspine.SkeletonBounds = function ()\r\n{\r\n    this.polygonPool = [];\r\n    this.polygons = [];\r\n    this.boundingBoxes = [];\r\n};\r\nspine.SkeletonBounds.prototype = {\r\n    minX: 0, minY: 0, maxX: 0, maxY: 0,\r\n    update: function (skeleton, updateAabb)\r\n    {\r\n        var slots = skeleton.slots;\r\n        var slotCount = slots.length;\r\n        var x = skeleton.x, y = skeleton.y;\r\n        var boundingBoxes = this.boundingBoxes;\r\n        var polygonPool = this.polygonPool;\r\n        var polygons = this.polygons;\r\n\r\n        boundingBoxes.length = 0;\r\n        for (var i = 0, n = polygons.length; i < n; i++)\r\n            polygonPool.push(polygons[i]);\r\n        polygons.length = 0;\r\n\r\n        for (var i = 0; i < slotCount; i++)\r\n        {\r\n            var slot = slots[i];\r\n            var boundingBox = slot.attachment;\r\n            if (boundingBox.type != spine.AttachmentType.boundingbox) continue;\r\n            boundingBoxes.push(boundingBox);\r\n\r\n            var poolCount = polygonPool.length, polygon;\r\n            if (poolCount > 0)\r\n            {\r\n                polygon = polygonPool[poolCount - 1];\r\n                polygonPool.splice(poolCount - 1, 1);\r\n            } else\r\n                polygon = [];\r\n            polygons.push(polygon);\r\n\r\n            polygon.length = boundingBox.vertices.length;\r\n            boundingBox.computeWorldVertices(x, y, slot.bone, polygon);\r\n        }\r\n\r\n        if (updateAabb) this.aabbCompute();\r\n    },\r\n    aabbCompute: function ()\r\n    {\r\n        var polygons = this.polygons;\r\n        var minX = Number.MAX_VALUE, minY = Number.MAX_VALUE, maxX = Number.MIN_VALUE, maxY = Number.MIN_VALUE;\r\n        for (var i = 0, n = polygons.length; i < n; i++)\r\n        {\r\n            var vertices = polygons[i];\r\n            for (var ii = 0, nn = vertices.length; ii < nn; ii += 2)\r\n            {\r\n                var x = vertices[ii];\r\n                var y = vertices[ii + 1];\r\n                minX = Math.min(minX, x);\r\n                minY = Math.min(minY, y);\r\n                maxX = Math.max(maxX, x);\r\n                maxY = Math.max(maxY, y);\r\n            }\r\n        }\r\n        this.minX = minX;\r\n        this.minY = minY;\r\n        this.maxX = maxX;\r\n        this.maxY = maxY;\r\n    },\r\n    /** Returns true if the axis aligned bounding box contains the point. */\r\n    aabbContainsPoint: function (x, y)\r\n    {\r\n        return x >= this.minX && x <= this.maxX && y >= this.minY && y <= this.maxY;\r\n    },\r\n    /** Returns true if the axis aligned bounding box intersects the line segment. */\r\n    aabbIntersectsSegment: function (x1, y1, x2, y2)\r\n    {\r\n        var minX = this.minX, minY = this.minY, maxX = this.maxX, maxY = this.maxY;\r\n        if ((x1 <= minX && x2 <= minX) || (y1 <= minY && y2 <= minY) || (x1 >= maxX && x2 >= maxX) || (y1 >= maxY && y2 >= maxY))\r\n            return false;\r\n        var m = (y2 - y1) / (x2 - x1);\r\n        var y = m * (minX - x1) + y1;\r\n        if (y > minY && y < maxY) return true;\r\n        y = m * (maxX - x1) + y1;\r\n        if (y > minY && y < maxY) return true;\r\n        var x = (minY - y1) / m + x1;\r\n        if (x > minX && x < maxX) return true;\r\n        x = (maxY - y1) / m + x1;\r\n        if (x > minX && x < maxX) return true;\r\n        return false;\r\n    },\r\n    /** Returns true if the axis aligned bounding box intersects the axis aligned bounding box of the specified bounds. */\r\n    aabbIntersectsSkeleton: function (bounds)\r\n    {\r\n        return this.minX < bounds.maxX && this.maxX > bounds.minX && this.minY < bounds.maxY && this.maxY > bounds.minY;\r\n    },\r\n    /** Returns the first bounding box attachment that contains the point, or null. When doing many checks, it is usually more\r\n     * efficient to only call this method if {@link #aabbContainsPoint(float, float)} returns true. */\r\n    containsPoint: function (x, y)\r\n    {\r\n        var polygons = this.polygons;\r\n        for (var i = 0, n = polygons.length; i < n; i++)\r\n            if (this.polygonContainsPoint(polygons[i], x, y)) return this.boundingBoxes[i];\r\n        return null;\r\n    },\r\n    /** Returns the first bounding box attachment that contains the line segment, or null. When doing many checks, it is usually\r\n     * more efficient to only call this method if {@link #aabbIntersectsSegment(float, float, float, float)} returns true. */\r\n    intersectsSegment: function (x1, y1, x2, y2)\r\n    {\r\n        var polygons = this.polygons;\r\n        for (var i = 0, n = polygons.length; i < n; i++)\r\n            if (polygons[i].intersectsSegment(x1, y1, x2, y2)) return this.boundingBoxes[i];\r\n        return null;\r\n    },\r\n    /** Returns true if the polygon contains the point. */\r\n    polygonContainsPoint: function (polygon, x, y)\r\n    {\r\n        var nn = polygon.length;\r\n        var prevIndex = nn - 2;\r\n        var inside = false;\r\n        for (var ii = 0; ii < nn; ii += 2)\r\n        {\r\n            var vertexY = polygon[ii + 1];\r\n            var prevY = polygon[prevIndex + 1];\r\n            if ((vertexY < y && prevY >= y) || (prevY < y && vertexY >= y))\r\n            {\r\n                var vertexX = polygon[ii];\r\n                if (vertexX + (y - vertexY) / (prevY - vertexY) * (polygon[prevIndex] - vertexX) < x) inside = !inside;\r\n            }\r\n            prevIndex = ii;\r\n        }\r\n        return inside;\r\n    },\r\n    /** Returns true if the polygon contains the line segment. */\r\n    polygonIntersectsSegment: function (polygon, x1, y1, x2, y2)\r\n    {\r\n        var nn = polygon.length;\r\n        var width12 = x1 - x2, height12 = y1 - y2;\r\n        var det1 = x1 * y2 - y1 * x2;\r\n        var x3 = polygon[nn - 2], y3 = polygon[nn - 1];\r\n        for (var ii = 0; ii < nn; ii += 2)\r\n        {\r\n            var x4 = polygon[ii], y4 = polygon[ii + 1];\r\n            var det2 = x3 * y4 - y3 * x4;\r\n            var width34 = x3 - x4, height34 = y3 - y4;\r\n            var det3 = width12 * height34 - height12 * width34;\r\n            var x = (det1 * width34 - width12 * det2) / det3;\r\n            if (((x >= x3 && x <= x4) || (x >= x4 && x <= x3)) && ((x >= x1 && x <= x2) || (x >= x2 && x <= x1)))\r\n            {\r\n                var y = (det1 * height34 - height12 * det2) / det3;\r\n                if (((y >= y3 && y <= y4) || (y >= y4 && y <= y3)) && ((y >= y1 && y <= y2) || (y >= y2 && y <= y1))) return true;\r\n            }\r\n            x3 = x4;\r\n            y3 = y4;\r\n        }\r\n        return false;\r\n    },\r\n    getPolygon: function (attachment)\r\n    {\r\n        var index = this.boundingBoxes.indexOf(attachment);\r\n        return index == -1 ? null : this.polygons[index];\r\n    },\r\n    getWidth: function ()\r\n    {\r\n        return this.maxX - this.minX;\r\n    },\r\n    getHeight: function ()\r\n    {\r\n        return this.maxY - this.minY;\r\n    }\r\n};\r\nmodule.exports = spine.SkeletonBounds;\r\n\r\n","var spine = require('../SpineUtil');\nspine.SkeletonData = function ()\n{\n    this.bones = [];\n    this.slots = [];\n    this.skins = [];\n    this.events = [];\n    this.animations = [];\n    this.ikConstraints = [];\n};\nspine.SkeletonData.prototype = {\n    name: null,\n    defaultSkin: null,\n    width: 0, height: 0,\n    version: null, hash: null,\n    /** @return May be null. */\n    findBone: function (boneName)\n    {\n        var bones = this.bones;\n        for (var i = 0, n = bones.length; i < n; i++)\n            if (bones[i].name == boneName) return bones[i];\n        return null;\n    },\n    /** @return -1 if the bone was not found. */\n    findBoneIndex: function (boneName)\n    {\n        var bones = this.bones;\n        for (var i = 0, n = bones.length; i < n; i++)\n            if (bones[i].name == boneName) return i;\n        return -1;\n    },\n    /** @return May be null. */\n    findSlot: function (slotName)\n    {\n        var slots = this.slots;\n        for (var i = 0, n = slots.length; i < n; i++)\n        {\n            if (slots[i].name == slotName) return this.slots[i];\n        }\n        return null;\n    },\n    /** @return -1 if the bone was not found. */\n    findSlotIndex: function (slotName)\n    {\n        var slots = this.slots;\n        for (var i = 0, n = slots.length; i < n; i++)\n            if (slots[i].name == slotName) return i;\n        return -1;\n    },\n    /** @return May be null. */\n    findSkin: function (skinName)\n    {\n        var skins = this.skins;\n        for (var i = 0, n = skins.length; i < n; i++)\n            if (skins[i].name == skinName) return skins[i];\n        return null;\n    },\n    /** @return May be null. */\n    findEvent: function (eventName)\n    {\n        var events = this.events;\n        for (var i = 0, n = events.length; i < n; i++)\n            if (events[i].name == eventName) return events[i];\n        return null;\n    },\n    /** @return May be null. */\n    findAnimation: function (animationName)\n    {\n        var animations = this.animations;\n        for (var i = 0, n = animations.length; i < n; i++)\n            if (animations[i].name == animationName) return animations[i];\n        return null;\n    },\n    /** @return May be null. */\n    findIkConstraint: function (ikConstraintName)\n    {\n        var ikConstraints = this.ikConstraints;\n        for (var i = 0, n = ikConstraints.length; i < n; i++)\n            if (ikConstraints[i].name == ikConstraintName) return ikConstraints[i];\n        return null;\n    }\n};\nmodule.exports = spine.SkeletonData;\n\n","var spine = require('../SpineUtil');\nspine.SkeletonData = require('./SkeletonData');\nspine.BoneData = require('./BoneData');\nspine.IkConstraintData = require('./IkConstraintData');\nspine.SlotData = require('./SlotData');\nspine.Skin = require('./Skin');\nspine.EventData = require('./EventData');\nspine.AttachmentType = require('./AttachmentType');\nspine.ColorTimeline = require('./ColorTimeline');\nspine.AttachmentTimeline = require('./AttachmentTimeline');\nspine.RotateTimeline = require('./RotateTimeline');\nspine.ScaleTimeline = require('./ScaleTimeline');\nspine.TranslateTimeline = require('./TranslateTimeline');\nspine.IkConstraintTimeline = require('./IkConstraintTimeline');\nspine.FfdTimeline = require('./FfdTimeline');\nspine.DrawOrderTimeline = require('./DrawOrderTimeline');\nspine.EventTimeline = require('./EventTimeline');\nspine.Event = require('./Event');\nspine.Animation = require('./Animation');\n\nfunction LinkedMesh(mesh, skin, slotIndex, parent) {\n    this.mesh = mesh;\n    this.skin = skin;\n    this.slotIndex = slotIndex;\n    this.parent = parent;\n}\n\nspine.SkeletonJsonParser = function (attachmentLoader)\n{\n    this.attachmentLoader = attachmentLoader;\n    this.linkedMeshes = [];\n};\nspine.SkeletonJsonParser.prototype = {\n    scale: 1,\n    readSkeletonData: function (root, name)\n    {\n        var skeletonData = new spine.SkeletonData();\n        skeletonData.name = name;\n\n        // Skeleton.\n        var skeletonMap = root[\"skeleton\"];\n        if (skeletonMap)\n        {\n            skeletonData.hash = skeletonMap[\"hash\"];\n            skeletonData.version = skeletonMap[\"spine\"];\n            skeletonData.width = skeletonMap[\"width\"] || 0;\n            skeletonData.height = skeletonMap[\"height\"] || 0;\n        }\n\n        // Bones.\n        var bones = root[\"bones\"];\n        for (var i = 0, n = bones.length; i < n; i++)\n        {\n            var boneMap = bones[i];\n            var parent = null;\n            if (boneMap[\"parent\"])\n            {\n                parent = skeletonData.findBone(boneMap[\"parent\"]);\n                if (!parent) throw \"Parent bone not found: \" + boneMap[\"parent\"];\n            }\n            var boneData = new spine.BoneData(boneMap[\"name\"], parent);\n            boneData.length = (boneMap[\"length\"] || 0) * this.scale;\n            boneData.x = (boneMap[\"x\"] || 0) * this.scale;\n            boneData.y = (boneMap[\"y\"] || 0) * this.scale;\n            boneData.rotation = (boneMap[\"rotation\"] || 0);\n            boneData.scaleX = boneMap.hasOwnProperty(\"scaleX\") ? boneMap[\"scaleX\"] : 1;\n            boneData.scaleY = boneMap.hasOwnProperty(\"scaleY\") ? boneMap[\"scaleY\"] : 1;\n            boneData.inheritScale = boneMap.hasOwnProperty(\"inheritScale\") ? boneMap[\"inheritScale\"] : true;\n            boneData.inheritRotation = boneMap.hasOwnProperty(\"inheritRotation\") ? boneMap[\"inheritRotation\"] : true;\n            skeletonData.bones.push(boneData);\n        }\n\n        // IK constraints.\n        var ik = root[\"ik\"];\n        if (ik)\n        {\n            for (var i = 0, n = ik.length; i < n; i++)\n            {\n                var ikMap = ik[i];\n                var ikConstraintData = new spine.IkConstraintData(ikMap[\"name\"]);\n\n                var bones = ikMap[\"bones\"];\n                for (var ii = 0, nn = bones.length; ii < nn; ii++)\n                {\n                    var bone = skeletonData.findBone(bones[ii]);\n                    if (!bone) throw \"IK bone not found: \" + bones[ii];\n                    ikConstraintData.bones.push(bone);\n                }\n\n                ikConstraintData.target = skeletonData.findBone(ikMap[\"target\"]);\n                if (!ikConstraintData.target) throw \"Target bone not found: \" + ikMap[\"target\"];\n\n                ikConstraintData.bendDirection = (!ikMap.hasOwnProperty(\"bendPositive\") || ikMap[\"bendPositive\"]) ? 1 : -1;\n                ikConstraintData.mix = ikMap.hasOwnProperty(\"mix\") ? ikMap[\"mix\"] : 1;\n\n                skeletonData.ikConstraints.push(ikConstraintData);\n            }\n        }\n\n        // Slots.\n        var slots = root[\"slots\"];\n        for (var i = 0, n = slots.length; i < n; i++)\n        {\n            var slotMap = slots[i];\n            var boneData = skeletonData.findBone(slotMap[\"bone\"]);\n            if (!boneData) throw \"Slot bone not found: \" + slotMap[\"bone\"];\n            var slotData = new spine.SlotData(slotMap[\"name\"], boneData);\n\n            var color = slotMap[\"color\"];\n            if (color)\n            {\n                slotData.r = this.toColor(color, 0);\n                slotData.g = this.toColor(color, 1);\n                slotData.b = this.toColor(color, 2);\n                slotData.a = this.toColor(color, 3);\n            }\n\n            slotData.attachmentName = slotMap[\"attachment\"];\n\n\n            slotData.blendMode = slotMap[\"blend\"] && spine.SlotData.PIXI_BLEND_MODE_MAP[slotMap[\"blend\"]] || spine.SlotData.PIXI_BLEND_MODE_MAP['normal'];\n\n            skeletonData.slots.push(slotData);\n        }\n\n        // Skins.\n        var skins = root[\"skins\"];\n        for (var skinName in skins)\n        {\n            if (!skins.hasOwnProperty(skinName)) continue;\n            var skinMap = skins[skinName];\n            var skin = new spine.Skin(skinName);\n            for (var slotName in skinMap)\n            {\n                if (!skinMap.hasOwnProperty(slotName)) continue;\n                var slotIndex = skeletonData.findSlotIndex(slotName);\n                var slotEntry = skinMap[slotName];\n                for (var attachmentName in slotEntry)\n                {\n                    if (!slotEntry.hasOwnProperty(attachmentName)) continue;\n                    var attachment = this.readAttachment(skin, slotIndex, attachmentName, slotEntry[attachmentName]);\n                    if (attachment) skin.addAttachment(slotIndex, attachmentName, attachment);\n                }\n            }\n            skeletonData.skins.push(skin);\n            if (skin.name == \"default\") skeletonData.defaultSkin = skin;\n        }\n\n        var linkedMeshes = this.linkedMeshes;\n        // Linked meshes.\n        for (var i = 0, n = linkedMeshes.size; i < n; i++) {\n            var linkedMesh = linkedMeshes[i];\n            var skin = linkedMesh.skin ? skeletonData.findSkin(linkedMesh.skin): skeletonData.defaultSkin;\n            var parent = skin.getAttachment(linkedMesh.slotIndex, linkedMesh.parent);\n            linkedMesh.mesh.setParentMesh(parent);\n            linkedMesh.mesh.updateUVs();\n        }\n        linkedMeshes.length = 0;\n\n        // Events.\n        var events = root[\"events\"];\n        for (var eventName in events)\n        {\n            if (!events.hasOwnProperty(eventName)) continue;\n            var eventMap = events[eventName];\n            var eventData = new spine.EventData(eventName);\n            eventData.intValue = eventMap[\"int\"] || 0;\n            eventData.floatValue = eventMap[\"float\"] || 0;\n            eventData.stringValue = eventMap[\"string\"] || null;\n            skeletonData.events.push(eventData);\n        }\n\n        // Animations.\n        var animations = root[\"animations\"];\n        for (var animationName in animations)\n        {\n            if (!animations.hasOwnProperty(animationName)) continue;\n            this.readAnimation(animationName, animations[animationName], skeletonData);\n        }\n\n        return skeletonData;\n    },\n    readAttachment: function (skin, slotIndex, name, map)\n    {\n        name = map[\"name\"] || name;\n\n        var type = spine.AttachmentType[map[\"type\"] || \"region\"];\n        var path = map[\"path\"] || name;\n\n        var scale = this.scale;\n        if (type == spine.AttachmentType.region)\n        {\n            var region = this.attachmentLoader.newRegionAttachment(skin, name, path);\n            if (!region) return null;\n            region.path = path;\n            region.x = (map[\"x\"] || 0) * scale;\n            region.y = (map[\"y\"] || 0) * scale;\n            region.scaleX = map.hasOwnProperty(\"scaleX\") ? map[\"scaleX\"] : 1;\n            region.scaleY = map.hasOwnProperty(\"scaleY\") ? map[\"scaleY\"] : 1;\n            region.rotation = map[\"rotation\"] || 0;\n            region.width = (map[\"width\"] || 0) * scale;\n            region.height = (map[\"height\"] || 0) * scale;\n\n            var color = map[\"color\"];\n            if (color)\n            {\n                region.r = this.toColor(color, 0);\n                region.g = this.toColor(color, 1);\n                region.b = this.toColor(color, 2);\n                region.a = this.toColor(color, 3);\n            }\n\n            region.updateOffset();\n            return region;\n        } else if (type == spine.AttachmentType.boundingbox)\n        {\n            var attachment = this.attachmentLoader.newBoundingBoxAttachment(skin, name);\n            var vertices = map[\"vertices\"];\n            for (var i = 0, n = vertices.length; i < n; i++)\n                attachment.vertices.push(vertices[i] * scale);\n            return attachment;\n        } else if (type == spine.AttachmentType.mesh || type == spine.AttachmentType.linkedmesh)\n        {\n            var mesh = this.attachmentLoader.newMeshAttachment(skin, name, path);\n            if (!mesh) return null;\n            mesh.path = path;\n            color = map[\"color\"];\n            if (color)\n            {\n                mesh.r = this.toColor(color, 0);\n                mesh.g = this.toColor(color, 1);\n                mesh.b = this.toColor(color, 2);\n                mesh.a = this.toColor(color, 3);\n            }\n            mesh.width = (map[\"width\"] || 0) * scale;\n            mesh.height = (map[\"height\"] || 0) * scale;\n\n            var parent = map[\"parent\"];\n            if (!parent) {\n                mesh.vertices = this.getFloatArray(map, \"vertices\", scale);\n                mesh.triangles = this.getIntArray(map, \"triangles\");\n                mesh.regionUVs = this.getFloatArray(map, \"uvs\", 1);\n                mesh.updateUVs();\n                mesh.hullLength = (map[\"hull\"] || 0) * 2;\n                if (map[\"edges\"]) mesh.edges = this.getIntArray(map, \"edges\");\n            } else {\n                mesh.inheritFFD = !!map[\"ffd\"];\n                this.linkedMeshes.push(new LinkedMesh(mesh, map[\"skin\"] || null, slotIndex, parent));\n            }\n            return mesh;\n        } else if (type == spine.AttachmentType.weightedmesh || type == spine.AttachmentType.weightedlinkedmesh)\n        {\n            var mesh = this.attachmentLoader.newWeightedMeshAttachment(skin, name, path);\n            if (!mesh) return null;\n            mesh.path = path;\n            color = map[\"color\"];\n            if (color)\n            {\n                mesh.r = this.toColor(color, 0);\n                mesh.g = this.toColor(color, 1);\n                mesh.b = this.toColor(color, 2);\n                mesh.a = this.toColor(color, 3);\n            }\n            mesh.width = (map[\"width\"] || 0) * scale;\n            mesh.height = (map[\"height\"] || 0) * scale;\n\n            var parent = map[\"parent\"];\n            if (!parent) {\n                var uvs = this.getFloatArray(map, \"uvs\", 1);\n                var vertices = this.getFloatArray(map, \"vertices\", 1);\n                var weights = [];\n                var bones = [];\n                for (var i = 0, n = vertices.length; i < n; )\n                {\n                    var boneCount = vertices[i++] | 0;\n                    bones[bones.length] = boneCount;\n                    for (var nn = i + boneCount * 4; i < nn; )\n                    {\n                        bones[bones.length] = vertices[i];\n                        weights[weights.length] = vertices[i + 1] * scale;\n                        weights[weights.length] = vertices[i + 2] * scale;\n                        weights[weights.length] = vertices[i + 3];\n                        i += 4;\n                    }\n                }\n                mesh.bones = bones;\n                mesh.weights = weights;\n                mesh.triangles = this.getIntArray(map, \"triangles\");\n                mesh.regionUVs = uvs;\n                mesh.updateUVs();\n\n                mesh.hullLength = (map[\"hull\"] || 0) * 2;\n                if (map[\"edges\"]) mesh.edges = this.getIntArray(map, \"edges\");\n            } else {\n                mesh.inheritFFD = !!map[\"ffd\"];\n                this.linkedMeshes.push(new LinkedMesh(mesh, map[\"skin\"] || null, slotIndex, parent));\n            }\n            return mesh;\n        }\n        throw \"Unknown attachment type: \" + type;\n    },\n    readAnimation: function (name, map, skeletonData)\n    {\n        var timelines = [];\n        var duration = 0;\n\n        var slots = map[\"slots\"];\n        for (var slotName in slots)\n        {\n            if (!slots.hasOwnProperty(slotName)) continue;\n            var slotMap = slots[slotName];\n            var slotIndex = skeletonData.findSlotIndex(slotName);\n\n            for (var timelineName in slotMap)\n            {\n                if (!slotMap.hasOwnProperty(timelineName)) continue;\n                var values = slotMap[timelineName];\n                if (timelineName == \"color\")\n                {\n                    var timeline = new spine.ColorTimeline(values.length);\n                    timeline.slotIndex = slotIndex;\n\n                    var frameIndex = 0;\n                    for (var i = 0, n = values.length; i < n; i++)\n                    {\n                        var valueMap = values[i];\n                        var color = valueMap[\"color\"];\n                        var r = this.toColor(color, 0);\n                        var g = this.toColor(color, 1);\n                        var b = this.toColor(color, 2);\n                        var a = this.toColor(color, 3);\n                        timeline.setFrame(frameIndex, valueMap[\"time\"], r, g, b, a);\n                        this.readCurve(timeline, frameIndex, valueMap);\n                        frameIndex++;\n                    }\n                    timelines.push(timeline);\n                    duration = Math.max(duration, timeline.frames[timeline.getFrameCount() * 5 - 5]);\n\n                } else if (timelineName == \"attachment\")\n                {\n                    var timeline = new spine.AttachmentTimeline(values.length);\n                    timeline.slotIndex = slotIndex;\n\n                    var frameIndex = 0;\n                    for (var i = 0, n = values.length; i < n; i++)\n                    {\n                        var valueMap = values[i];\n                        timeline.setFrame(frameIndex++, valueMap[\"time\"], valueMap[\"name\"]);\n                    }\n                    timelines.push(timeline);\n                    duration = Math.max(duration, timeline.frames[timeline.getFrameCount() - 1]);\n\n                } else\n                    throw \"Invalid timeline type for a slot: \" + timelineName + \" (\" + slotName + \")\";\n            }\n        }\n\n        var bones = map[\"bones\"];\n        for (var boneName in bones)\n        {\n            if (!bones.hasOwnProperty(boneName)) continue;\n            var boneIndex = skeletonData.findBoneIndex(boneName);\n            if (boneIndex == -1) throw \"Bone not found: \" + boneName;\n            var boneMap = bones[boneName];\n\n            for (var timelineName in boneMap)\n            {\n                if (!boneMap.hasOwnProperty(timelineName)) continue;\n                var values = boneMap[timelineName];\n                if (timelineName == \"rotate\")\n                {\n                    var timeline = new spine.RotateTimeline(values.length);\n                    timeline.boneIndex = boneIndex;\n\n                    var frameIndex = 0;\n                    for (var i = 0, n = values.length; i < n; i++)\n                    {\n                        var valueMap = values[i];\n                        timeline.setFrame(frameIndex, valueMap[\"time\"], valueMap[\"angle\"]);\n                        this.readCurve(timeline, frameIndex, valueMap);\n                        frameIndex++;\n                    }\n                    timelines.push(timeline);\n                    duration = Math.max(duration, timeline.frames[timeline.getFrameCount() * 2 - 2]);\n\n                } else if (timelineName == \"translate\" || timelineName == \"scale\")\n                {\n                    var timeline;\n                    var timelineScale = 1;\n                    if (timelineName == \"scale\")\n                        timeline = new spine.ScaleTimeline(values.length);\n                    else\n                    {\n                        timeline = new spine.TranslateTimeline(values.length);\n                        timelineScale = this.scale;\n                    }\n                    timeline.boneIndex = boneIndex;\n\n                    var frameIndex = 0;\n                    for (var i = 0, n = values.length; i < n; i++)\n                    {\n                        var valueMap = values[i];\n                        var x = (valueMap[\"x\"] || 0) * timelineScale;\n                        var y = (valueMap[\"y\"] || 0) * timelineScale;\n                        timeline.setFrame(frameIndex, valueMap[\"time\"], x, y);\n                        this.readCurve(timeline, frameIndex, valueMap);\n                        frameIndex++;\n                    }\n                    timelines.push(timeline);\n                    duration = Math.max(duration, timeline.frames[timeline.getFrameCount() * 3 - 3]);\n\n                } else if (timelineName == \"flipX\" || timelineName == \"flipY\")\n                {\n                    throw \"flipX and flipY are not supported in spine v3: (\" + boneName + \")\";\n                } else\n                    throw \"Invalid timeline type for a bone: \" + timelineName + \" (\" + boneName + \")\";\n            }\n        }\n\n        var ikMap = map[\"ik\"];\n        for (var ikConstraintName in ikMap)\n        {\n            if (!ikMap.hasOwnProperty(ikConstraintName)) continue;\n            var ikConstraint = skeletonData.findIkConstraint(ikConstraintName);\n            var values = ikMap[ikConstraintName];\n            var timeline = new spine.IkConstraintTimeline(values.length);\n            timeline.ikConstraintIndex = skeletonData.ikConstraints.indexOf(ikConstraint);\n            var frameIndex = 0;\n            for (var i = 0, n = values.length; i < n; i++)\n            {\n                var valueMap = values[i];\n                var mix = valueMap.hasOwnProperty(\"mix\") ? valueMap[\"mix\"] : 1;\n                var bendDirection = (!valueMap.hasOwnProperty(\"bendPositive\") || valueMap[\"bendPositive\"]) ? 1 : -1;\n                timeline.setFrame(frameIndex, valueMap[\"time\"], mix, bendDirection);\n                this.readCurve(timeline, frameIndex, valueMap);\n                frameIndex++;\n            }\n            timelines.push(timeline);\n            duration = Math.max(duration, timeline.frames[timeline.getFrameCount() * 3 - 3]);\n        }\n\n        var ffd = map[\"ffd\"];\n        for (var skinName in ffd)\n        {\n            var skin = skeletonData.findSkin(skinName);\n            var slotMap = ffd[skinName];\n            for (slotName in slotMap)\n            {\n                var slotIndex = skeletonData.findSlotIndex(slotName);\n                var meshMap = slotMap[slotName];\n                for (var meshName in meshMap)\n                {\n                    var values = meshMap[meshName];\n                    var timeline = new spine.FfdTimeline(values.length);\n                    var attachment = skin.getAttachment(slotIndex, meshName);\n                    if (!attachment) throw \"FFD attachment not found: \" + meshName;\n                    timeline.slotIndex = slotIndex;\n                    timeline.attachment = attachment;\n\n                    var isMesh = attachment.type == spine.AttachmentType.mesh;\n                    var vertexCount;\n                    if (isMesh)\n                        vertexCount = attachment.vertices.length;\n                    else\n                        vertexCount = attachment.weights.length / 3 * 2;\n\n                    var frameIndex = 0;\n                    for (var i = 0, n = values.length; i < n; i++)\n                    {\n                        var valueMap = values[i];\n                        var vertices;\n                        if (!valueMap[\"vertices\"])\n                        {\n                            if (isMesh)\n                                vertices = attachment.vertices;\n                            else\n                            {\n                                vertices = [];\n                                for (var j = 0; j < vertexCount; ++j) vertices.push(0); //initialize to 0\n                            }\n                        } else {\n                            var verticesValue = valueMap[\"vertices\"];\n                            vertices = [];\n                            for (var j = 0; j < vertexCount; ++j) vertices.push(0); //initialize to 0\n                            var start = valueMap[\"offset\"] || 0;\n                            var nn = verticesValue.length;\n                            if (this.scale == 1)\n                            {\n                                for (var ii = 0; ii < nn; ii++)\n                                    vertices[ii + start] = verticesValue[ii];\n                            } else {\n                                for (var ii = 0; ii < nn; ii++)\n                                    vertices[ii + start] = verticesValue[ii] * this.scale;\n                            }\n                            if (isMesh)\n                            {\n                                var meshVertices = attachment.vertices;\n                                for (var ii = 0, nn = vertices.length; ii < nn; ii++)\n                                    vertices[ii] += meshVertices[ii];\n                            }\n                        }\n\n                        timeline.setFrame(frameIndex, valueMap[\"time\"], vertices);\n                        this.readCurve(timeline, frameIndex, valueMap);\n                        frameIndex++;\n                    }\n                    timelines[timelines.length] = timeline;\n                    duration = Math.max(duration, timeline.frames[timeline.getFrameCount() - 1]);\n                }\n            }\n        }\n\n        var drawOrderValues = map[\"drawOrder\"];\n        if (!drawOrderValues) drawOrderValues = map[\"draworder\"];\n        if (drawOrderValues)\n        {\n            var timeline = new spine.DrawOrderTimeline(drawOrderValues.length);\n            var slotCount = skeletonData.slots.length;\n            var frameIndex = 0;\n            for (var i = 0, n = drawOrderValues.length; i < n; i++)\n            {\n                var drawOrderMap = drawOrderValues[i];\n                var drawOrder = null;\n                if (drawOrderMap[\"offsets\"])\n                {\n                    drawOrder = [];\n                    drawOrder.length = slotCount;\n                    for (var ii = slotCount - 1; ii >= 0; ii--)\n                        drawOrder[ii] = -1;\n                    var offsets = drawOrderMap[\"offsets\"];\n                    var unchanged = [];\n                    unchanged.length = slotCount - offsets.length;\n                    var originalIndex = 0, unchangedIndex = 0;\n                    for (var ii = 0, nn = offsets.length; ii < nn; ii++)\n                    {\n                        var offsetMap = offsets[ii];\n                        var slotIndex = skeletonData.findSlotIndex(offsetMap[\"slot\"]);\n                        if (slotIndex == -1) throw \"Slot not found: \" + offsetMap[\"slot\"];\n                        // Collect unchanged items.\n                        while (originalIndex != slotIndex)\n                            unchanged[unchangedIndex++] = originalIndex++;\n                        // Set changed items.\n                        drawOrder[originalIndex + offsetMap[\"offset\"]] = originalIndex++;\n                    }\n                    // Collect remaining unchanged items.\n                    while (originalIndex < slotCount)\n                        unchanged[unchangedIndex++] = originalIndex++;\n                    // Fill in unchanged items.\n                    for (var ii = slotCount - 1; ii >= 0; ii--)\n                        if (drawOrder[ii] == -1) drawOrder[ii] = unchanged[--unchangedIndex];\n                }\n                timeline.setFrame(frameIndex++, drawOrderMap[\"time\"], drawOrder);\n            }\n            timelines.push(timeline);\n            duration = Math.max(duration, timeline.frames[timeline.getFrameCount() - 1]);\n        }\n\n        var events = map[\"events\"];\n        if (events)\n        {\n            var timeline = new spine.EventTimeline(events.length);\n            var frameIndex = 0;\n            for (var i = 0, n = events.length; i < n; i++)\n            {\n                var eventMap = events[i];\n                var eventData = skeletonData.findEvent(eventMap[\"name\"]);\n                if (!eventData) throw \"Event not found: \" + eventMap[\"name\"];\n                var event = new spine.Event(eventData);\n                event.intValue = eventMap.hasOwnProperty(\"int\") ? eventMap[\"int\"] : eventData.intValue;\n                event.floatValue = eventMap.hasOwnProperty(\"float\") ? eventMap[\"float\"] : eventData.floatValue;\n                event.stringValue = eventMap.hasOwnProperty(\"string\") ? eventMap[\"string\"] : eventData.stringValue;\n                timeline.setFrame(frameIndex++, eventMap[\"time\"], event);\n            }\n            timelines.push(timeline);\n            duration = Math.max(duration, timeline.frames[timeline.getFrameCount() - 1]);\n        }\n\n        skeletonData.animations.push(new spine.Animation(name, timelines, duration));\n    },\n    readCurve: function (timeline, frameIndex, valueMap)\n    {\n        var curve = valueMap[\"curve\"];\n        if (!curve)\n            timeline.curves.setLinear(frameIndex);\n        else if (curve == \"stepped\")\n            timeline.curves.setStepped(frameIndex);\n        else if (curve instanceof Array)\n            timeline.curves.setCurve(frameIndex, curve[0], curve[1], curve[2], curve[3]);\n    },\n    toColor: function (hexString, colorIndex)\n    {\n        if (hexString.length != 8) throw \"Color hexidecimal length must be 8, recieved: \" + hexString;\n        return parseInt(hexString.substring(colorIndex * 2, (colorIndex * 2) + 2), 16) / 255;\n    },\n    getFloatArray: function (map, name, scale)\n    {\n        var list = map[name];\n        var values = new spine.Float32Array(list.length);\n        var i = 0, n = list.length;\n        if (scale == 1)\n        {\n            for (; i < n; i++)\n                values[i] = list[i];\n        } else {\n            for (; i < n; i++)\n                values[i] = list[i] * scale;\n        }\n        return values;\n    },\n    getIntArray: function (map, name)\n    {\n        var list = map[name];\n        var values = new spine.Uint16Array(list.length);\n        for (var i = 0, n = list.length; i < n; i++)\n            values[i] = list[i] | 0;\n        return values;\n    }\n};\nmodule.exports = spine.SkeletonJsonParser;\n\n","var spine = require('../SpineUtil');\r\nspine.Skin = function (name)\r\n{\r\n    this.name = name;\r\n    this.attachments = {};\r\n};\r\nspine.Skin.prototype = {\r\n    addAttachment: function (slotIndex, name, attachment)\r\n    {\r\n        this.attachments[slotIndex + \":\" + name] = attachment;\r\n    },\r\n    getAttachment: function (slotIndex, name)\r\n    {\r\n        return this.attachments[slotIndex + \":\" + name];\r\n    },\r\n    _attachAll: function (skeleton, oldSkin)\r\n    {\r\n        for (var key in oldSkin.attachments)\r\n        {\r\n            var colon = key.indexOf(\":\");\r\n            var slotIndex = parseInt(key.substring(0, colon));\r\n            var name = key.substring(colon + 1);\r\n            var slot = skeleton.slots[slotIndex];\r\n            if (slot.attachment && slot.attachment.name == name)\r\n            {\r\n                var attachment = this.getAttachment(slotIndex, name);\r\n                if (attachment) slot.setAttachment(attachment);\r\n            }\r\n        }\r\n    }\r\n};\r\nmodule.exports = spine.Skin;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.Slot = function (slotData, bone)\r\n{\r\n    this.data = slotData;\r\n    this.bone = bone;\r\n    this.setToSetupPose();\r\n};\r\nspine.Slot.prototype = {\r\n    r: 1, g: 1, b: 1, a: 1,\r\n    _attachmentTime: 0,\r\n    attachment: null,\r\n    attachmentVertices: [],\r\n    setAttachment: function (attachment)\r\n    {\r\n        this.attachment = attachment;\r\n        this._attachmentTime = this.bone.skeleton.time;\r\n        this.attachmentVertices.length = 0;\r\n    },\r\n    setAttachmentTime: function (time)\r\n    {\r\n        this._attachmentTime = this.bone.skeleton.time - time;\r\n    },\r\n    getAttachmentTime: function ()\r\n    {\r\n        return this.bone.skeleton.time - this._attachmentTime;\r\n    },\r\n    setToSetupPose: function ()\r\n    {\r\n        var data = this.data;\r\n        this.r = data.r;\r\n        this.g = data.g;\r\n        this.b = data.b;\r\n        this.a = data.a;\r\n        this.blendMode = data.blendMode;\r\n\r\n        var slotDatas = this.bone.skeleton.data.slots;\r\n        for (var i = 0, n = slotDatas.length; i < n; i++)\r\n        {\r\n            if (slotDatas[i] == data)\r\n            {\r\n                this.setAttachment(!data.attachmentName ? null : this.bone.skeleton.getAttachmentBySlotIndex(i, data.attachmentName));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n};\r\nmodule.exports = spine.Slot;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.SlotData = function (name, boneData)\r\n{\r\n    this.name = name;\r\n    this.boneData = boneData;\r\n};\r\n\r\nspine.SlotData.PIXI_BLEND_MODE_MAP = {\r\n    'multiply': PIXI.BLEND_MODES.MULTIPLY,\r\n    'screen': PIXI.BLEND_MODES.SCREEN,\r\n    'additive': PIXI.BLEND_MODES.ADD,\r\n    'normal': PIXI.BLEND_MODES.NORMAL\r\n};\r\n\r\nspine.SlotData.prototype = {\r\n    r: 1, g: 1, b: 1, a: 1,\r\n    attachmentName: null,\r\n    blendMode: PIXI.BLEND_MODES.NORMAL\r\n\r\n\r\n};\r\n\r\n\r\nmodule.exports = spine.SlotData;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.TrackEntry = function ()\r\n{};\r\nspine.TrackEntry.prototype = {\r\n    next: null, previous: null,\r\n    animation: null,\r\n    loop: false,\r\n    delay: 0, time: 0, lastTime: -1, endTime: 0,\r\n    timeScale: 1,\r\n    mixTime: 0, mixDuration: 0, mix: 1,\r\n    onStart: null, onEnd: null, onComplete: null, onEvent: null\r\n};\r\nmodule.exports = spine.TrackEntry;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.Animation = require('./Animation');\r\nspine.Curves = require('./Curves');\r\nspine.TranslateTimeline = function (frameCount)\r\n{\r\n    this.curves = new spine.Curves(frameCount);\r\n    this.frames = []; // time, x, y, ...\r\n    this.frames.length = frameCount * 3;\r\n};\r\nspine.TranslateTimeline.prototype = {\r\n    boneIndex: 0,\r\n    getFrameCount: function ()\r\n    {\r\n        return this.frames.length / 3;\r\n    },\r\n    setFrame: function (frameIndex, time, x, y)\r\n    {\r\n        frameIndex *= 3;\r\n        this.frames[frameIndex] = time;\r\n        this.frames[frameIndex + 1] = x;\r\n        this.frames[frameIndex + 2] = y;\r\n    },\r\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\r\n    {\r\n        var frames = this.frames;\r\n        if (time < frames[0]) return; // Time is before first frame.\r\n\r\n        var bone = skeleton.bones[this.boneIndex];\r\n\r\n        if (time >= frames[frames.length - 3])\r\n        { // Time is after last frame.\r\n            bone.x += (bone.data.x + frames[frames.length - 2] - bone.x) * alpha;\r\n            bone.y += (bone.data.y + frames[frames.length - 1] - bone.y) * alpha;\r\n            return;\r\n        }\r\n\r\n        // Interpolate between the previous frame and the current frame.\r\n        var frameIndex = spine.Animation.binarySearch(frames, time, 3);\r\n        var prevFrameX = frames[frameIndex - 2];\r\n        var prevFrameY = frames[frameIndex - 1];\r\n        var frameTime = frames[frameIndex];\r\n        var percent = 1 - (time - frameTime) / (frames[frameIndex + -3/*PREV_FRAME_TIME*/] - frameTime);\r\n        percent = this.curves.getCurvePercent(frameIndex / 3 - 1, percent);\r\n\r\n        bone.x += (bone.data.x + prevFrameX + (frames[frameIndex + 1/*FRAME_X*/] - prevFrameX) * percent - bone.x) * alpha;\r\n        bone.y += (bone.data.y + prevFrameY + (frames[frameIndex + 2/*FRAME_Y*/] - prevFrameY) * percent - bone.y) * alpha;\r\n    }\r\n};\r\nmodule.exports = spine.TranslateTimeline;\r\n\r\n","var spine = require('../SpineUtil') || {};\nspine.AttachmentType = require('./AttachmentType');\nspine.WeightedMeshAttachment = function (name)\n{\n    this.name = name;\n};\nspine.WeightedMeshAttachment.prototype = {\n    type: spine.AttachmentType.weightedmesh,\n    parentMesh: null,\n    inheritFFD: false,\n    bones: null,\n    weights: null,\n    uvs: null,\n    regionUVs: null,\n    triangles: null,\n    hullLength: 0,\n    r: 1, g: 1, b: 1, a: 1,\n    path: null,\n    rendererObject: null,\n    regionU: 0, regionV: 0, regionU2: 0, regionV2: 0, regionRotate: false,\n    regionOffsetX: 0, regionOffsetY: 0,\n    regionWidth: 0, regionHeight: 0,\n    regionOriginalWidth: 0, regionOriginalHeight: 0,\n    edges: null,\n    width: 0, height: 0,\n    updateUVs: function (u, v, u2, v2, rotate)\n    {\n        var width = this.regionU2 - this.regionU, height = this.regionV2 - this.regionV;\n        var n = this.regionUVs.length;\n        if (!this.uvs || this.uvs.length != n)\n        {\n            this.uvs = new spine.Float32Array(n);\n        }\n        if (this.regionRotate)\n        {\n            for (var i = 0; i < n; i += 2)\n            {\n                this.uvs[i] = this.regionU + this.regionUVs[i + 1] * width;\n                this.uvs[i + 1] = this.regionV + height - this.regionUVs[i] * height;\n            }\n        } else {\n            for (var i = 0; i < n; i += 2)\n            {\n                this.uvs[i] = this.regionU + this.regionUVs[i] * width;\n                this.uvs[i + 1] = this.regionV + this.regionUVs[i + 1] * height;\n            }\n        }\n    },\n    computeWorldVertices: function (x, y, slot, worldVertices)\n    {\n        var skeletonBones = slot.bone.skeleton.bones;\n        var weights = this.weights;\n        var bones = this.bones;\n\n        var w = 0, v = 0, b = 0, f = 0, n = bones.length, nn;\n        var wx, wy, vx, vy, weight;\n        var m;\n        if (!slot.attachmentVertices.length)\n        {\n            for (; v < n; w += 2)\n            {\n                wx = 0;\n                wy = 0;\n                nn = bones[v++] + v;\n                for (; v < nn; v++, b += 3)\n                {\n                    m = skeletonBones[bones[v]].matrix;\n                    vx = weights[b];\n                    vy = weights[b + 1];\n                    weight = weights[b + 2];\n                    wx += (vx * m.a + vy * m.c + m.tx) * weight;\n                    wy += (vx * m.b + vy * m.d + m.ty) * weight;\n                }\n                worldVertices[w] = wx + x;\n                worldVertices[w + 1] = wy + y;\n            }\n        } else {\n            var ffd = slot.attachmentVertices;\n            for (; v < n; w += 2)\n            {\n                wx = 0;\n                wy = 0;\n                nn = bones[v++] + v;\n                for (; v < nn; v++, b += 3, f += 2)\n                {\n                    m = skeletonBones[bones[v]].matrix;\n                    vx = weights[b] + ffd[f];\n                    vy = weights[b + 1] + ffd[f + 1];\n                    weight = weights[b + 2];\n                    wx += (vx * m.a + vy * m.c + m.tx) * weight;\n                    wy += (vx * m.b + vy * m.d + m.ty) * weight;\n                }\n                worldVertices[w] = wx + x;\n                worldVertices[w + 1] = wy + y;\n            }\n        }\n    },\n    applyFFD: function(sourceAttachment) {\n        return this === sourceAttachment || (this.inheritFFD && parentMesh === sourceAttachment);\n    },\n    setParentMesh: function(parentMesh) {\n        this.parentMesh = parentMesh;\n        if (parentMesh != null) {\n            this.bones = parentMesh.bones;\n            this.weights = parentMesh.weights;\n            this.regionUVs = parentMesh.regionUVs;\n            this.triangles = parentMesh.triangles;\n            this.hullLength = parentMesh.hullLength;\n        }\n    }\n};\nmodule.exports = spine.WeightedMeshAttachment;\n\n","/******************************************************************************\n * Spine Runtimes Software License\n * Version 2.1\n *\n * Copyright (c) 2013, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable and\n * non-transferable license to install, execute and perform the Spine Runtimes\n * Software (the \"Software\") solely for internal use. Without the written\n * permission of Esoteric Software (typically granted by licensing Spine), you\n * may not (a) modify, translate, adapt or otherwise create derivative works,\n * improvements of the Software or develop new applications using the Software\n * or (b) remove, delete, alter or obscure any trademarks or any copyright,\n * trademark, patent or other intellectual property or proprietary rights\n * notices on or in the Software, including any copy thereof. Redistributions\n * in binary or source form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;\n * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\n * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\n * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nvar spine = require('../SpineUtil');\nspine.Animation = require('./Animation');\nspine.AnimationStateData = require('./AnimationStateData');\nspine.AnimationState = require('./AnimationState');\nspine.AtlasAttachmentParser = require('./AtlasAttachmentParser');\nspine.Atlas = require('./Atlas');\nspine.AtlasPage = require('./AtlasPage');\nspine.AtlasReader = require('./AtlasReader');\nspine.AtlasRegion = require('./AtlasRegion');\nspine.AttachmentTimeline = require('./AttachmentTimeline');\nspine.AttachmentType = require('./AttachmentType');\nspine.BoneData = require('./BoneData');\nspine.Bone = require('./Bone');\nspine.BoundingBoxAttachment = require('./BoundingBoxAttachment');\nspine.ColorTimeline = require('./ColorTimeline');\nspine.Curves = require('./Curves');\nspine.DrawOrderTimeline = require('./DrawOrderTimeline');\nspine.EventData = require('./EventData');\nspine.Event = require('./Event');\nspine.EventTimeline = require('./EventTimeline');\nspine.FfdTimeline = require('./FfdTimeline');\nspine.IkConstraintData = require('./IkConstraintData');\nspine.IkConstraint = require('./IkConstraint');\nspine.IkConstraintTimeline = require('./IkConstraintTimeline');\nspine.MeshAttachment = require('./MeshAttachment');\nspine.RegionAttachment = require('./RegionAttachment');\nspine.RotateTimeline = require('./RotateTimeline');\nspine.ScaleTimeline = require('./ScaleTimeline');\nspine.SkeletonBounds = require('./SkeletonBounds');\nspine.SkeletonData = require('./SkeletonData');\nspine.Skeleton = require('./Skeleton');\nspine.SkeletonJsonParser = require('./SkeletonJsonParser');\nspine.Skin = require('./Skin.js');\nspine.WeightedMeshAttachment = require('./WeightedMeshAttachment');\nspine.SlotData = require('./SlotData');\nspine.Slot = require('./Slot');\nspine.TrackEntry = require('./TrackEntry');\nspine.TranslateTimeline = require('./TranslateTimeline');\nmodule.exports = spine;\n","module.exports = {\n    radDeg: 180 / Math.PI,\n    degRad: Math.PI / 180,\n    temp: [],\n    Float32Array: (typeof(Float32Array) === 'undefined') ? Array : Float32Array,\n    Uint16Array: (typeof(Uint16Array) === 'undefined') ? Array : Uint16Array,\n    signum: function(x) {\n        if (x>0) return 1;\n        if (x<0) return -1;\n        return 0;\n    }\n};\n\n","var spine = require('../SpineRuntime');\nvar atlasParser = require('../loaders/atlasParser');\n\n/* Esoteric Software SPINE wrapper for pixi.js */\nspine.Bone.yDown = true;\n\n/**\n * A class that enables the you to import and run your spine animations in pixi.\n * The Spine animation data needs to be loaded using either the Loader or a SpineLoader before it can be used by this class\n * See example 12 (http://www.goodboydigital.com/pixijs/examples/12/) to see a working example and check out the source\n *\n * ```js\n * var spineAnimation = new PIXI.Spine(spineData);\n * ```\n *\n * @class\n * @extends Container\n * @memberof PIXI.spine\n * @param spineData {object} The spine data loaded from a spine atlas.\n */\nfunction Spine(spineData)\n{\n    PIXI.Container.call(this);\n\n    if (!spineData)\n    {\n        throw new Error('The spineData param is required.');\n    }\n\n    if ((typeof spineData) === \"string\")\n    {\n        throw new Error('spineData param cant be string. Please use PIXI.spine.Spine.fromAtlas(\"YOUR_RESOURCE_NAME\") from now on.');\n    }\n\n    /**\n     * The spineData object\n     *\n     * @member {object}\n     */\n    this.spineData = spineData;\n\n    /**\n     * A spine Skeleton object\n     *\n     * @member {object}\n     */\n    this.skeleton = new spine.Skeleton(spineData);\n    this.skeleton.updateWorldTransform();\n\n    /**\n     * A spine AnimationStateData object created from the spine data passed in the constructor\n     *\n     * @member {object}\n     */\n    this.stateData = new spine.AnimationStateData(spineData);\n\n    /**\n     * A spine AnimationState object created from the spine AnimationStateData object\n     *\n     * @member {object}\n     */\n    this.state = new spine.AnimationState(this.stateData);\n\n    /**\n     * An array of containers\n     *\n     * @member {Container[]}\n     */\n    this.slotContainers = [];\n\n    for (var i = 0, n = this.skeleton.slots.length; i < n; i++)\n    {\n        var slot = this.skeleton.slots[i];\n        var attachment = slot.attachment;\n        var slotContainer = new PIXI.Container();\n        this.slotContainers.push(slotContainer);\n        this.addChild(slotContainer);\n\n        if (attachment instanceof spine.RegionAttachment)\n        {\n            var spriteName = attachment.rendererObject.name;\n            var sprite = this.createSprite(slot, attachment);\n            slot.currentSprite = sprite;\n            slot.currentSpriteName = spriteName;\n            slotContainer.addChild(sprite);\n        }\n        else if (attachment instanceof spine.MeshAttachment)\n        {\n            var mesh = this.createMesh(slot, attachment);\n            slot.currentMesh = mesh;\n            slot.currentMeshName = attachment.name;\n            slotContainer.addChild(mesh);\n        }\n        else\n        {\n            continue;\n        }\n\n    }\n\n    /**\n     * Should the Spine object update its transforms\n     *\n     * @member {boolean}\n     */\n    this.autoUpdate = true;\n}\n\nSpine.fromAtlas = function(resourceName) {\n    var skeletonData = atlasParser.AnimCache[resourceName];\n\n    if (!skeletonData)\n    {\n        throw new Error('Spine data \"' + resourceName + '\" does not exist in the animation cache');\n    }\n\n    return new Spine(skeletonData);\n}\n\nSpine.prototype = Object.create(PIXI.Container.prototype);\nSpine.prototype.constructor = Spine;\nmodule.exports = Spine;\n\nSpine.globalAutoUpdate = true;\n\nObject.defineProperties(Spine.prototype, {\n    /**\n     * If this flag is set to true, the spine animation will be autoupdated every time\n     * the object id drawn. The down side of this approach is that the delta time is\n     * automatically calculated and you could miss out on cool effects like slow motion,\n     * pause, skip ahead and the sorts. Most of these effects can be achieved even with\n     * autoupdate enabled but are harder to achieve.\n     *\n     * @member {boolean}\n     * @memberof Spine#\n     * @default true\n     */\n    autoUpdate: {\n        get: function ()\n        {\n            return (this.updateTransform === Spine.prototype.autoUpdateTransform);\n        },\n\n        set: function (value)\n        {\n            this.updateTransform = value ? Spine.prototype.autoUpdateTransform : PIXI.Container.prototype.updateTransform;\n        }\n    }\n});\n\n/**\n * Update the spine skeleton and its animations by delta time (dt)\n *\n * @param dt {number} Delta time. Time by which the animation should be updated\n */\nSpine.prototype.update = function (dt)\n{\n    this.state.update(dt);\n    this.state.apply(this.skeleton);\n    this.skeleton.updateWorldTransform();\n\n    var drawOrder = this.skeleton.drawOrder;\n    var slots = this.skeleton.slots;\n\n    for (var i = 0, n = drawOrder.length; i < n; i++)\n    {\n        this.children[i] = this.slotContainers[drawOrder[i]];\n    }\n\n    for (i = 0, n = slots.length; i < n; i++)\n    {\n        var slot = slots[i];\n        var attachment = slot.attachment;\n        var slotContainer = this.slotContainers[i];\n\n        if (!attachment)\n        {\n            slotContainer.visible = false;\n            continue;\n        }\n\n        var type = attachment.type;\n        if (type === spine.AttachmentType.region)\n        {\n            if (attachment.rendererObject)\n            {\n                if (!slot.currentSpriteName || slot.currentSpriteName !== attachment.rendererObject.name)\n                {\n                    var spriteName = attachment.rendererObject.name;\n                    if (slot.currentSprite !== undefined)\n                    {\n                        slot.currentSprite.visible = false;\n                    }\n                    slot.sprites = slot.sprites || {};\n                    if (slot.sprites[spriteName] !== undefined)\n                    {\n                        slot.sprites[spriteName].visible = true;\n                    }\n                    else\n                    {\n                        var sprite = this.createSprite(slot, attachment);\n                        slotContainer.addChild(sprite);\n                    }\n                    slot.currentSprite = slot.sprites[spriteName];\n                    slot.currentSpriteName = spriteName;\n                }\n            }\n\n            if (slotContainer.transform ) {\n                //PIXI v4.0\n                if (!slotContainer.transform._dirtyLocal) {\n                    slotContainer.transform = new PIXI.TransformStatic();\n                }\n                var transform = slotContainer.transform;\n                var lt = transform.localTransform;\n                transform._dirtyParentVersion = -1;\n                transform._dirtyLocal = 1;\n                transform._versionLocal = 1;\n                slot.bone.matrix.copy(lt);\n                lt.tx += slot.bone.skeleton.x;\n                lt.ty += slot.bone.skeleton.y;\n            } else {\n                //PIXI v3\n                var lt = slotContainer.localTransform || new PIXI.Matrix();\n                slot.bone.matrix.copy(lt);\n                lt.tx += slot.bone.skeleton.x;\n                lt.ty += slot.bone.skeleton.y;\n                slotContainer.localTransform = lt;\n                slotContainer.displayObjectUpdateTransform = SlotContainerUpdateTransformV3;\n            }\n\n            slot.currentSprite.blendMode = slot.blendMode;\n            slot.currentSprite.tint = PIXI.utils.rgb2hex([slot.r,slot.g,slot.b]);\n        }\n        else if (type === spine.AttachmentType.skinnedmesh || type === spine.AttachmentType.mesh)\n        {\n            if (!slot.currentMeshName || slot.currentMeshName !== attachment.name)\n            {\n                var meshName = attachment.name;\n                if (slot.currentMesh !== undefined)\n                {\n                    slot.currentMesh.visible = false;\n                }\n\n                slot.meshes = slot.meshes || {};\n\n                if (slot.meshes[meshName] !== undefined)\n                {\n                    slot.meshes[meshName].visible = true;\n                }\n                else\n                {\n                    var mesh = this.createMesh(slot, attachment);\n                    slotContainer.addChild(mesh);\n                }\n\n                slot.currentMesh = slot.meshes[meshName];\n                slot.currentMeshName = meshName;\n            }\n            attachment.computeWorldVertices(slot.bone.skeleton.x, slot.bone.skeleton.y, slot, slot.currentMesh.vertices);\n        }\n        else\n        {\n            slotContainer.visible = false;\n            continue;\n        }\n        slotContainer.visible = true;\n\n        slotContainer.alpha = slot.a;\n    }\n};\n\n/**\n * When autoupdate is set to yes this function is used as pixi's updateTransform function\n *\n * @private\n */\nSpine.prototype.autoUpdateTransform = function ()\n{\n    if (Spine.globalAutoUpdate) {\n        this.lastTime = this.lastTime || Date.now();\n        var timeDelta = (Date.now() - this.lastTime) * 0.001;\n        this.lastTime = Date.now();\n        this.update(timeDelta);\n    } else {\n        this.lastTime = 0;\n    }\n\n    PIXI.Container.prototype.updateTransform.call(this);\n};\n\n/**\n * Create a new sprite to be used with spine.RegionAttachment\n *\n * @param slot {spine.Slot} The slot to which the attachment is parented\n * @param attachment {spine.RegionAttachment} The attachment that the sprite will represent\n * @private\n */\nSpine.prototype.createSprite = function (slot, attachment)\n{\n    var descriptor = attachment.rendererObject;\n    var baseTexture = descriptor.page.rendererObject;\n    var spriteRect = new PIXI.Rectangle(descriptor.x,\n                                        descriptor.y,\n                                        descriptor.rotate ? descriptor.height : descriptor.width,\n                                        descriptor.rotate ? descriptor.width : descriptor.height);\n    var spriteTexture = new PIXI.Texture(baseTexture, spriteRect);\n    var sprite = new PIXI.Sprite(spriteTexture);\n\n    var baseRotation = descriptor.rotate ? Math.PI * 0.5 : 0.0;\n    sprite.scale.x = attachment.width / descriptor.originalWidth * attachment.scaleX;\n    sprite.scale.y = attachment.height / descriptor.originalHeight * attachment.scaleY;\n    sprite.rotation = -baseRotation + (attachment.rotation * spine.degRad);\n    sprite.anchor.x = (0.5 * descriptor.originalWidth - descriptor.offsetX) / descriptor.width;\n    sprite.anchor.y = 1.0 - ((0.5 * descriptor.originalHeight - descriptor.offsetY) / descriptor.height);\n    sprite.position.x = attachment.x;\n    sprite.position.y = attachment.y;\n    sprite.alpha = attachment.a;\n\n    if (descriptor.rotate) {\n        var x1 = sprite.scale.x;\n        sprite.scale.x = sprite.scale.y;\n        sprite.scale.y = x1;\n    }\n    sprite.scale.y = -sprite.scale.y;\n\n    slot.sprites = slot.sprites || {};\n    slot.sprites[descriptor.name] = sprite;\n    return sprite;\n};\n\n/**\n * Creates a Strip from the spine data\n * @param slot {spine.Slot} The slot to which the attachment is parented\n * @param attachment {spine.RegionAttachment} The attachment that the sprite will represent\n * @private\n */\nSpine.prototype.createMesh = function (slot, attachment)\n{\n    var descriptor = attachment.rendererObject;\n    var baseTexture = descriptor.page.rendererObject;\n    var texture = new PIXI.Texture(baseTexture);\n\n    var strip = new PIXI.mesh.Mesh(\n        texture,\n        new Float32Array(attachment.uvs.length),\n        new Float32Array(attachment.uvs),\n        new Uint16Array(attachment.triangles),\n        PIXI.mesh.Mesh.DRAW_MODES.TRIANGLES);\n\n    strip.canvasPadding = 1.5;\n\n    strip.alpha = attachment.a;\n\n    slot.meshes = slot.meshes || {};\n    slot.meshes[attachment.name] = strip;\n\n    return strip;\n};\n\nfunction SlotContainerUpdateTransformV3()\n{\n    var pt = this.parent.worldTransform;\n    var wt = this.worldTransform;\n    var lt = this.localTransform;\n    wt.a  = lt.a  * pt.a + lt.b  * pt.c;\n    wt.b  = lt.a  * pt.b + lt.b  * pt.d;\n    wt.c  = lt.c  * pt.a + lt.d  * pt.c;\n    wt.d  = lt.c  * pt.b + lt.d  * pt.d;\n    wt.tx = lt.tx * pt.a + lt.ty * pt.c + pt.tx;\n    wt.ty = lt.tx * pt.b + lt.ty * pt.d + pt.ty;\n    this.worldAlpha = this.alpha * this.parent.worldAlpha;\n    this._currentBounds = null;\n};\n","/**\r\n * @file        Spine resource loader\r\n * @author      Ivan Popelyshev <ivan.popelyshev@gmail.com>\r\n * @copyright   2013-2015 GoodBoyDigital\r\n * @license     {@link https://github.com/GoodBoyDigital/pixi.js/blob/master/LICENSE|MIT License}\r\n */\r\n\r\n/**\r\n * @namespace PIXI.loaders\r\n */\r\n\r\nvar atlasParser = require('./atlasParser');\r\n\r\nPIXI.loaders.Loader.addPixiMiddleware(atlasParser);\r\nPIXI.loader.use(atlasParser());\r\n","var Resource = PIXI.loaders.Resource,\r\n    spine = require('../SpineRuntime'),\r\n    imageLoaderAdapter = require('./imageLoaderAdapter');\r\n\r\nvar atlasParser = module.exports = function () {\r\n    return function (resource, next) {\r\n        // skip if no data, its not json, or it isn't atlas data\r\n        if (!resource.data || !resource.isJson || !resource.data.bones) {\r\n            return next();\r\n        }\r\n\r\n        /**\r\n         * use a bit of hackery to load the atlas file, here we assume that the .json, .atlas and .png files\r\n         * that correspond to the spine file are in the same base URL and that the .json and .atlas files\r\n         * have the same name\r\n         */\r\n        var atlasPath = resource.url.substr(0, resource.url.lastIndexOf('.')) + '.atlas';\r\n        var atlasOptions = {\r\n            crossOrigin: resource.crossOrigin,\r\n            xhrType: Resource.XHR_RESPONSE_TYPE.TEXT,\r\n            metadata: resource.metadata.spineMetadata\r\n        };\r\n        var imageOptions = {\r\n            crossOrigin: resource.crossOrigin,\r\n            metadata: resource.metadata.imageMetadata\r\n        };\r\n        var baseUrl = resource.url.substr(0, resource.url.lastIndexOf('/') + 1);\r\n\r\n        var adapter = imageLoaderAdapter(this, resource.name + '_atlas_page_', baseUrl, imageOptions);\r\n        this.add(resource.name + '_atlas', atlasPath, atlasOptions, function (res) {\r\n            new spine.Atlas(this.xhr.responseText, adapter, function(spineAtlas) {\r\n                var spineJsonParser = new spine.SkeletonJsonParser(new spine.AtlasAttachmentParser(spineAtlas));\r\n                var skeletonData = spineJsonParser.readSkeletonData(resource.data);\r\n\r\n                resource.spineData = skeletonData;\r\n                resource.spineAtlas = spineAtlas;\r\n                if (atlasParser.enableCaching)\r\n                    atlasParser.AnimCache[resource.name] = resource.spineData;\r\n\r\n                next();\r\n            });\r\n        });\r\n    };\r\n};\r\n\r\natlasParser.AnimCache = {};\r\natlasParser.enableCaching = true;\r\n","var spine = require('../SpineRuntime');\r\n\r\nmodule.exports = function (loader, namePrefix, baseUrl, imageOptions) {\r\n    if (baseUrl && baseUrl.lastIndexOf('/') !== (baseUrl.length-1))\r\n    {\r\n        baseUrl += '/';\r\n    }\r\n    return function(line, callback) {\r\n        var name = namePrefix + line;\r\n        var url = baseUrl + line;\r\n        loader.add(name, url, imageOptions, function(resource) {\r\n            callback(resource.texture.baseTexture);\r\n        });\r\n    }\r\n};\r\n","module.exports = {\r\n    atlasParser: require('./atlasParser'),\r\n    Loader: require('./Loader'),\r\n    syncImageLoaderAdapter: require('./syncImageLoaderAdapter'),\r\n    imageLoaderAdapter: require('./imageLoaderAdapter')\r\n};\r\n","var spine = require('../SpineRuntime');\r\n\r\nmodule.exports = function (baseUrl, crossOrigin) {\r\n    if (baseUrl && baseUrl.lastIndexOf('/') !== (baseUrl.length-1))\r\n    {\r\n        baseUrl += '/';\r\n    }\r\n    return function(line, callback) {\r\n        callback(PIXI.BaseTexture.fromImage(line, crossOrigin));\r\n    }\r\n};\r\n"],"sourceRoot":"./"}